/*   *  ------------  [GP_20] - Frame Class Utility  --------------  *   *  Explanation: This is the basic code to create a frame with some *  Gases Pro Sensor Board sensors *   *  Copyright (C) 2015 Libelium Comunicaciones Distribuidas S.L.  *  http://www.libelium.com  *   *  This program is free software: you can redistribute it and/or modify   *  it under the terms of the GNU General Public License as published by   *  the Free Software Foundation, either version 3 of the License, or   *  (at your option) any later version.   *    *  This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. *  *  You should have received a copy of the GNU General Public License *  along with this program.  If not, see <http://www.gnu.org/licenses/>. * *  Version:      0.1 *  Design:             David Gascón *  Implementation:     Luis Miguel Marti */#include <WaspXBeeDM.h>#include <WaspSensorGas_Pro.h>#include <WaspFrame.h>Gas SO2(SOCKET_1);Gas CO(SOCKET_2);Gas CH4(SOCKET_3);//Gas O2(SOCKET_4);//Gas NO(SOCKET_5);Gas NO2(SOCKET_6);float temperature; float humidity; float pressure;float concSO2;float concCO;float concCH4;//float concO2;//float concNO;float concNO2;char node_ID[] = "CDtest5";// PAN (Personal Area Network) Identifieruint8_t  panID[2] = {0x7F,0xFF}; ////////////////////////////////////////////// Define Freq Channel to be set: // Digimesh 2.4Ghz. Range from 0x0B to 0x1A// Digimesh 900Mhz. Range from 0x00 to 0x0Buint8_t  channel = 0x01;/* 0x00 – Channel 0 -- 902 – 904,16 GHz0x01 – Channel 1 --  904,16 – 906,32 GHz0x02 – Channel 2 -- 906,32 – 908,48 GHz0x03 – Channel 3 -- 908,48 – 910,64 GHz0x04 – Channel 4 -- 910,64 – 912,80 GHz0x05 – Channel 5 -- 912,80 – 914,96 GHz0x06 – Channel 6 -- 914,96 – 917,12 GHz0x07 – Channel 7 -- 917,12 – 919,28 GHz0x08 – Channel 8 -- 919,28 – 921,44 GHz0x09 – Channel 9 -- 921,44 – 923,6 GHz0x0A – Channel 10 -- 923,6 – 925,76 GHz0x0B – Channel 11 -- 925,76 – 928 GHz*///////////////////////////////////////////// Destination MAC address//////////////////////////////////////////char RX_ADDRESS[] = "0013A20040794b68";////////////////////////////////////////////OR// Define BROADCAST MAC address////////////////////////////////////////////char RX_ADDRESS[] = "000000000000FFFF";//////////////////////////////////////////// define variableuint8_t error;// Define the Encryption mode: 1 (enabled) or 0 (disabled)uint8_t encryptionMode = 0;// Define the AES 16-byte Encryption Keychar  encryptionKey[] = "WaspmoteValeKey!"; void setup() {  USB.ON();  USB.println(F("Frame Utility Example for Gases Pro Sensor Board"));  USB.println(F("Configure XBee Digimesh"));  USB.println(F("-------------------------------"));        // init XBee  xbeeDM.ON();   /////////////////////////////////////  // 1. set channel   /////////////////////////////////////  xbeeDM.setChannel( channel );  // check at commmand execution flag  if( xbeeDM.error_AT == 0 )   {    USB.print(F("1. Channel set OK to: 0x"));    USB.printHex( xbeeDM.channel );    USB.println();  }  else   {    USB.println(F("1. Error calling 'setChannel()'"));  }/////////Mesh Network Retries (4.7 manual digimesh)/////////////////////  xbeeDM.setMeshNetworkRetries(0x07);    xbeeDM.getMeshNetworkRetries();  ///////////////////// Set Power Lever ////////////////////*Parameter  XBee-PRO0           10dBm1           12dBm2           14dBm3           16dBm 4           18dBm*/xbeeDM.setPowerLevel(4);xbeeDM.getPowerLevel();//////////////////////////////////////////////  /////////////////////////////////////  // 2. set PANID  /////////////////////////////////////  xbeeDM.setPAN( panID );  // check the AT commmand execution flag  if( xbeeDM.error_AT == 0 )   {    USB.print(F("2. PAN ID set OK to: 0x"));    USB.printHex( xbeeDM.PAN_ID[0] );     USB.printHex( xbeeDM.PAN_ID[1] );     USB.println();  }  else   {    USB.println(F("2. Error calling 'setPAN()'"));    }    /////////////////////////////////////  // 3. set encryption mode (1:enable; 0:disable)  /////////////////////////////////////  xbeeDM.setEncryptionMode( encryptionMode );  // check the AT commmand execution flag  if( xbeeDM.error_AT == 0 )   {    USB.print(F("3. AES encryption configured (1:enabled; 0:disabled):"));    USB.println( xbeeDM.encryptMode, DEC );  }  else   {    USB.println(F("3. Error calling 'setEncryptionMode()'"));  }  /////////////////////////////////////  // 4. set encryption key  /////////////////////////////////////  xbeeDM.setLinkKey( encryptionKey );  // check the AT commmand execution flag  if( xbeeDM.error_AT == 0 )   {    USB.println(F("4. AES encryption key set OK"));  }  else   {    USB.println(F("4. Error calling 'setLinkKey()'"));   }     ////////////Set RTC Time ///////////////////////// // Powers RTC up, init I2C bus and read initial values  USB.println(F("Init RTC"));  RTC.ON();    // Setting time [yy:mm:dd:dow:hh:mm:ss]  RTC.setTime("16:07:27:00:09:55:00");  USB.print(F("Setting time: ")); // USB.println(F("13:01:16:06:12:33:00"));/////////////////////////////////////////////  /////////////////////////////////////  // 5. write values to XBee module memory  /////////////////////////////////////  xbeeDM.writeValues();  // check the AT commmand execution flag  if( xbeeDM.error_AT == 0 )   {    USB.println(F("5. Changes stored OK"));  }  else   {    USB.println(F("5. Error calling 'writeValues()'"));     }  USB.println(F("-------------------------------"));  }void loop(){  ///////////////////////////////////////////  // 1. Turn on sensors and wait  ///////////////////////////////////////////  //Power on sensors  SO2.ON();  CO.ON();  CH4.ON();  //O2.ON();  //NO.ON();  NO2.ON();    // Sensors need time to warm up and get a response from gas  // To reduce the battery consumption, use deepSleep instead delay  // After 2 minutes, Waspmote wakes up thanks to the RTC Alarm    PWR.deepSleep("00:00:02:00", RTC_OFFSET, RTC_ALM1_MODE1, ALL_ON);///////////////////////////////////////////  // 2. Read sensors  ///////////////////////////////////////////      // Read the CO2 sensor and compensate with the temperature internally  concSO2 = SO2.getConc();  // Read the CO sensor and compensate with the temperature internally  concCO = CO.getConc();  // Read the O3 sensor and compensate with the temperature internally  concCH4 = CH4.getConc();  // Read the O2 sensor and compensate with the temperature internally  //concO2 = O2.getConc();  // Read the NO sensor and compensate with the temperature internally // concNO = NO.getConc();  // Read the NO2 sensor and compensate with the temperature internally  concNO2 = NO2.getConc();    // Read enviromental variables  temperature = CO.getTemp();  humidity = CO.getHumidity();  pressure = CO.getPressure();  ///////////////////////////////////////////  // 3. Turn off the sensors  ///////////////////////////////////////////   //Power off sensors  SO2.OFF();  CO.OFF();  CH4.OFF();  //O2.OFF();  //NO.OFF();  NO2.OFF();       /////////////////////////////////////  // 1. get channel   /////////////////////////////////////  xbeeDM.getChannel();  USB.print(F("channel: "));  USB.printHex(xbeeDM.channel);  USB.println();  USB.print(F("Set Retries: "));  USB.printHex(xbeeDM.meshNetRetries);  USB.println(); /////////////////////////////////////  // 2. get PAN ID  /////////////////////////////////////  xbeeDM.getPAN();  USB.print(F("panid: "));  USB.printHex(xbeeDM.PAN_ID[0]);   USB.printHex(xbeeDM.PAN_ID[1]);   USB.println();     /////////////////////////////////////  // 3. get Encryption mode (1:enable; 0:disable)  /////////////////////////////////////  xbeeDM.getEncryptionMode();  USB.print(F("encryption mode: "));  USB.printHex(xbeeDM.encryptMode);  USB.println();     USB.println(F("-------------------------------"));        delay(3000);///////////////////////////////////////////////////////// END Digi Mesh Config ////////////////////////////////////////////////////////////////////RTC Time ///////////////////// // get Time from RTC  RTC.getTime();/////////////////////////////////////////    ///////////////////////////////////////////  // 4. Create ASCII frame  ///////////////////////////////////////////   // Create new frame (ASCII)  frame.createFrame(ASCII);  // Add temperature  frame.addSensor(SENSOR_GP_TC, temperature);  // Add humidity  frame.addSensor(SENSOR_GP_HUM, humidity);  // Add pressure value  frame.addSensor(SENSOR_GP_PRES, pressure);  // Add CO2 value  frame.addSensor(SENSOR_GP_SO2, concSO2);  // Add CO value  frame.addSensor(SENSOR_GP_CO, concCO);  // Add O3 value  frame.addSensor(SENSOR_GP_CH4, concCH4);  // Add O2 value // frame.addSensor(SENSOR_GP_O2, concO2);  // Add NO value // frame.addSensor(SENSOR_GP_NO, concNO);  // Add NO2 value  frame.addSensor(SENSOR_GP_NO2, concNO2);frame.addSensor(SENSOR_DATE, RTC.date, RTC.month, RTC.year);  frame.addSensor(SENSOR_TIME, RTC.hour, RTC.minute, RTC.second);  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());  // Show the frame  frame.showFrame();    USB.println(F("-------------------------------"));  USB.println(F("Send Packet"));  USB.println(F("-------------------------------")); // send XBee packet  error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );       // check TX flag  if( error == 0 )  {    USB.println(F("send ok"));        // blink green LED        Utils.blinkGreenLED();      }  else   {    USB.println(F("send error"));        // blink red LED    Utils.blinkRedLED();  }  // wait for five seconds  delay(5000);  //wait 2 seconds  delay(2000);}
