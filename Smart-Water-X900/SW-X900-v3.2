
/*
* ------ [900_01] - configure basic XBee parameters --------
*
* Implementation: Alex & Tom
*/

#include <WaspXBee900.h>
#include <WaspFrame.h>
#include <WaspSensorSW.h>

#include <TurbiditySensor.h>
#include <ModbusMaster485.h>
#include <Wasp485.h>

///////////////////////////////////
// define variable
///////////////////////////////////

turbiditySensorClass turbiditySensor;
float value_turb; // Turbidity Sensor
float value_pH; //PH sensor
float value_temp; //Temp 
float value_pH_calculated; //PH sensor
float value_orp; //Oxidation-reduction
float value_orp_calculated; //Oxidation-reduction
float value_di; //Dissolved Ions
float value_do; // Dissolved Oxygen
float value_do_calculated; // Dissolved Oxygen
float value_cond; //Conductivity Sensor
float value_cond_calculated; ////Conductivity Sensor
uint8_t error;




//-------------------------------------------------   Calibration ------------------------------------------------------------

/////////////////////////////////////////
// Calibration values
////////////////////////////////////////
#define cal_point_10 1.985
#define cal_point_7 2.057
#define cal_point_4 2.227
// Temperature at which calibration was carried out
#define cal_temp 23.7
// Offset obtained from sensor calibration
#define calibration_offset 0.016
// Calibration of the sensor in normal air
#define air_calibration 2.8473
// Calibration of the sensor under 0% solution
#define zero_calibration 0.0
    // Value 1 used to calibrate the sensor
//#define point1_cond 10500
// Value 2 used to calibrate the sensor
    //#define point2_cond 40000
// Point 1 of the calibration 
#define point1_cal 197.00
// Point 2 of the calibration 
#define point2_cal 150.00

//////////////////////////////////////////
// PAN (Personal Area Network) Identifier
    uint8_t panID[2] = {0x7F,0xFF};


// Define the Encryption mode: 1 (enabled) or 0 (disabled)
    uint8_t encryptionMode = 0;


// Define the AES 16-byte Encryption Key
    char encryptionKey[] = "WaspmoteLinkKey!";

// Destination MAC address /////////////// 
//////////////////////////////////////////
    char RX_ADDRESS[] = "0013A200408DE1AF";
//char RX_ADDRESS[] = "000000000000FFFF";
//////////////////////////////////////////

// Define the Waspmote ID
    char WASPMOTE_ID[] = "Node1_SW_Vitoria Park";


pHClass pHSensor;
ORPClass ORPSensor;
DIClass DISensor;
DOClass DOSensor;
conductivityClass ConductivitySensor;
pt1000Class TemperatureSensor;


       
                                          
// ---------------------------------------------- Config Calibration Values ----------------------------------------------------------

void setup()
{
  
// Configure the calibration values
  pHSensor.setCalibrationPoints(cal_point_10, 
                                cal_point_7, 
                                cal_point_4, 
                                cal_temp);
  DOSensor.setCalibrationPoints(air_calibration, zero_calibration);
// ConductivitySensor.setCalibrationPoints(point1_cond,
//                                         point1_cal, 
//                                         point2_cond, 
//                                         point2_cal);
// open USB port


// ---------------------------------------------- Config Xbee ----------------------------------------------------------
    USB.ON();

    USB.println(F("-------------------------------"));
    USB.println(F("Configure XBee 900"));
    USB.println(F("Sending Packets"));
    USB.println(F("-------------------------------"));


// init XBee
    xbee900.ON(SOCKET1);

// store Waspmote identifier in EEPROM memory
    frame.setID( WASPMOTE_ID );
    

/////////////////////////////////////
// 1. set PANID
/////////////////////////////////////
    xbee900.setPAN( panID );

// check the AT commmand execution flag
    if( xbee900.error_AT == 0 )
{
    USB.print(F("1. PAN ID set OK to: 0x"));
    USB.printHex( xbee900.PAN_ID[0] );
    USB.printHex( xbee900.PAN_ID[1] );
    USB.println();
}
  else
{
    USB.println(F("1. Error calling 'setPAN()'"));
}


/////////////////////////////////////
// 2. set encryption mode (1:enable; 0:disable)
/////////////////////////////////////
    xbee900.setEncryptionMode( encryptionMode );


// check the AT commmand execution flag
  if( xbee900.error_AT == 0 )
{
    USB.print(F("2. AES encryption configured (1:enabled; 0:disabled):"));
    USB.println( xbee900.encryptMode, DEC );
}
else
{
    USB.println(F("2. Error calling 'setEncryptionMode()'"));
}


/////////////////////////////////////
// 3. set encryption key
/////////////////////////////////////
    xbee900.setLinkKey( encryptionKey );

// check the AT commmand execution flag
    if( xbee900.error_AT == 0 )
{
    USB.println(F("3. AES encryption key set OK"));
}
  else
{
    USB.println(F("3. Error calling 'setLinkKey()'"));
}

/////////////////////////////////////
// 4. write values to XBee module memory
/////////////////////////////////////
    xbee900.writeValues();

// check the AT commmand execution flag
  if( xbee900.error_AT == 0 )
{
    USB.println(F("4. Changes stored OK"));
}
  else
{
    USB.println(F("4. Error calling 'writeValues()'"));
}

    USB.println(F("-------------------------------"));
}

  void loop()
{
 
// --------------------------------------------------------End Xbee Config-------------------------------------------------------------------- 
  
  
// --------------------------------------------------------Read Sensors ----------------------------------------------------------------------  
  ///////////////////////////////////////////
  // 1. Turn on the board
  /////////////////////////////////////////// 

  SensorSW.ON();
  delay(2000);
// ------------------------------------------------------- Turbidity -------------------------------------------------------------------------
 turbiditySensor.ON();
 delay(2000);
  // Result of the communication
    int result = -1;
    int retries = 0;
    
  ///////////////////////////////////////////////////////////
  // Get Turbidity Measure
  ///////////////////////////////////////////////////////////

  // Initializes the retries counter
  retries = 0;

  // This variable will store the result of the communication
  // result = 0 : no errors 
  // result = 1 : error occurred
  result = -1;

  while ((result !=0) & (retries < 5)) 
  {  
    retries ++;
    result = turbiditySensor.readTurbidity();
    //USB.print(result);
    delay(10);
  }


delay(500);   

value_turb = turbiditySensor.getTurbidity();
  
     ///////////////////////////////////////////////////////////
  // Print Turbidity Value
  ///////////////////////////////////////////////////////////
  if (result == 0) {
  //  float turbidity = turbiditySensor.getTurbidity();
    USB.print(F("Turbidity value: "));
   // USB.print(turbidity);    
    USB.print(value_turb);    
    USB.println(F(" NTU"));
  } else {
USB.println(F("Error while reading turbidity sensor"));
  }
//----------------------------------------------------- Read Other Sensors ---------------------------------------------------

  ///////////////////////////////////////////
  // 2. Read sensors
  ///////////////////////////////////////////  
  
USB.println(F("1. Read Sensors"));
// Read the ph sensor
    value_pH = pHSensor.readpH();
// Convert the value read with the information obtained in calibration
    value_pH_calculated = pHSensor.pHConversion(value_pH,value_temp);

// Read the temperature sensor
    value_temp = TemperatureSensor.readTemperature();

// Reading of the ORP sensor
    value_orp = ORPSensor.readORP();
// Apply the calibration offset
    value_orp_calculated = value_orp - calibration_offset;
 
// Reading of the DI sensor
   //value_di = DISensor.readDI();

// Reading of the ORP sensor
    value_do = DOSensor.readDO();
// Conversion from volts into dissolved oxygen percentage
    value_do_calculated = DOSensor.DOConversion(value_do);
  
// Reading of the Conductivity sensor
  //  value_cond = ConductivitySensor.readConductivity();
// Conversion from resistance into ms/cm
  // value_cond_calculated = ConductivitySensor.conductivityConversion(value_cond);
  delay(1000);
  
  ///////////////////////////////////////////
  // 3. Turn off the sensors
  /////////////////////////////////////////// 

  SensorSW.OFF();
 USB.println(F("1. Sensors Off"));
 turbiditySensor.OFF();
  //wait 2 seconds
delay(2000);

// -------------------------------------------------------- Read Sensors End -------------------------------------------------  
 

// -------------------------------------------------------Create Frame and send ----------------------------------------------
 
///////////////////////////////////////////
// 1. Create Max Frame Binnary frame
///////////////////////////////////////////

// create new frame
    frame.createFrame(ASCII);  
    //frame.createFrame(MAX_FRAME);  
//USB.println(frame.getFrameSize(),DEC); 

// Add frame fields

// Add Bettery
frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());

// Add temperature
  frame.addSensor(SENSOR_WT, value_temp);
  
// Add PH
  frame.addSensor(SENSOR_PH, value_pH_calculated);
  
// Add ORP value
  frame.addSensor(SENSOR_ORP, value_orp_calculated);
  
// Add DI value
  //frame.addSensor(SENSOR_DINA, value_di);
  
// Add DO value
  frame.addSensor(SENSOR_DO, value_do_calculated);
  
// Add conductivity value
  //frame.addSensor(SENSOR_COND, value_cond_calculated);

// Add TurbiditySensor
frame.addSensor(SENSOR_TURB, value_turb);

// Show the frame
frame.showFrame();

///////////////////////////////////////////
// 2. Send packet
///////////////////////////////////////////

// send XBee packet
error = xbee900.send( RX_ADDRESS, frame.buffer, frame.length );
USB.println(F("1. Frame Sent"));

// check TX flag
if( error == 0 )
{
USB.println(F("send ok"));

// blink green LED
Utils.blinkGreenLED();

}
else
{
USB.println(F("send error"));

// blink red LED
Utils.blinkRedLED();
}

// wait for five seconds
delay(5000);

}
