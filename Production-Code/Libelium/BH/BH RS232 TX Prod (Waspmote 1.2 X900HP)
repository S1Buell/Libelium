//BH RS232 TX Prod (Waspmote 1.2 X900HP)

//Test DEC 6th
//Send every min DEC 6th
// Coded created by Alex and Tom Nov 13 2017
// Alex Calegari Fracaroli C0479831@vale.com
// Tom Massicotte Tom.massicotte@vale.com

//Pre Prod Test Code (Tom)
//Test DEC 6th

// Added Encyp and test x900HP on 1,2 Board (Tom)
// Workig with x900HP / Waspmote 1.2 / Send error retry

//Changes
// Area #1.0 Set Pan ID 
// Area #2.0 Set MAC ID 
// Area #3.0 Set Waspmote ID 
// Area #4.0 Set Channel 
// Area #7.0 Set Network Retries 
// Area #8.0 Set Radio Power Output 

//last code we made 

#include <Wasp232.h>
#include <ModbusMaster232.h> 
#include <WaspXBeeDM.h> 
#include <WaspFrame.h>

  //================================================================================
  //                      Set Variables
  //================================================================================

  //Area #1 Set Pan ID
  uint8_t panID[2] = {0x7F,0xFF};

//Area #2 Set MAC ID 
// Define BROADCAST MAC address
//  char RX_ADDRESS[] = "000000000000FFFF";
//or 
char RX_ADDRESS[] = "0013A2004104876A";

//Area #3 Set Waspmote ID
char WASPMOTE_ID[] = "Tom-1.2-1.5";

// Area #4 Set Channel
uint8_t channel = 0x00;

/* 
    0x00 – Channel 0 -- 902 – 904,16 GHz
    0x01 – Channel 1 --  904,16 – 906,32 GHz
    0x02 – Channel 2 -- 906,32 – 908,48 GHz
    0x03 – Channel 3 -- 908,48 – 910,64 GHz
    0x04 – Channel 4 -- 910,64 – 912,80 GHz
    0x05 – Channel 5 -- 912,80 – 914,96 GHz
    0x06 – Channel 6 -- 914,96 – 917,12 GHz
    0x07 – Channel 7 -- 917,12 – 919,28 GHz
    0x08 – Channel 8 -- 919,28 – 921,44 GHz
    0x09 – Channel 9 -- 921,44 – 923,6 GHz
    0x0A – Channel 10 -- 923,6 – 925,76 GHz
    0x0B – Channel 11 -- 925,76 – 928 GHz
*/

// Area #5 Set Encryption On/Off
// Define the Encryption mode: 1 (enabled) or 0 (disabled)
uint8_t encryptionMode = 1;

// Area #6 Set Encrypton Key
// Define the AES 16-byte Encryption Key
char encryptionKey[] = "M6j3b456IIOTKey!";

int countFramesWhlie = 0;

//Loop For Xbee Transmission
int counter = 0;

// define variable
uint8_t error;
float battery = 0;
float battery_min = 0;
float inc = 0;
float temp = 0;
float pH;
float orp = 0;
float turb = 0;
float od = 0;
float bat_sonda = 0;
float alim_sonda = 0;
float wipper = 0;

// Instantiate ModbusMaster object as slave ID 1
ModbusMaster232 slave(1);

// Float Sensor Data
// Water Temp
char temp2string[20] = "nd";

//Solar Battery Level 
char battery2srt[20] = "nd";

// Ph Value
char number2[20];

// ORP Vale
char number3[20];

// Trubidity
char number4[20];

// OD Sensor
char number5[20];

//Betery voltage inside the Sensor
char bat_sonda2str[20] = "nd";

//Voltage recived by sensor
char alim_sonda2str[20] = "nd";

// Wiper amp used 
char wipper2str[20] = "nd";

int result;

//================================================================================
//                      Setup Loop
//================================================================================
void setup() {
  //Power on the USB for viewing data in the serial monitor. 
  USB.ON();
  // init XBee
  xbeeDM.ON(SOCKET1);

  //painID
  xbeeDM.setPAN(panID);

  // Set Radio Identifier
  xbeeDM.setNodeIdentifier(WASPMOTE_ID);
  xbeeDM.getNodeIdentifier();

  // store Waspmote identifier in EEPROM memory
  frame.setID(WASPMOTE_ID);

  //Area #7 Set Network Retries for Mesh Network
  xbeeDM.setMeshNetworkRetries(0x07);
  xbeeDM.getMeshNetworkRetries();

  //Area #8 Set Radio Power Output

  /*
  Parameter   XBee-PRO
  0            10dBm
  1            12dBm
  2            14dBm
  3            16dBm 
  4            18dBm
  */

  xbeeDM.setPowerLevel(4);
  xbeeDM.getPowerLevel();

  //  Set channel

  xbeeDM.setChannel(channel);

  // check at commmand execution flag
  if (xbeeDM.error_AT == 0) 
  {
    USB.print(F("1. Channel set OK to: 0x"));
    USB.printHex(xbeeDM.channel);
    USB.println();
  } 
  else 
  {
    USB.println(F("1. Error calling 'setChannel()'"));
  }

  // 2. set PANID
  RTC.ON();
  xbeeDM.setPAN(panID);

  // check the AT commmand execution flag
  if (xbeeDM.error_AT == 0) 
  {
    USB.print(F("2. PAN ID set OK to: 0x"));
    USB.printHex(xbeeDM.PAN_ID[0]);
    USB.printHex(xbeeDM.PAN_ID[1]);
    USB.println();
  } 
  else 
  {
    USB.println(F("2. Error calling 'setPAN()'"));
  }

  // 3. set encryption mode (1:enable; 0:disable)
  xbeeDM.setEncryptionMode(encryptionMode);

  // check the AT commmand execution flag
  if (xbeeDM.error_AT == 0) 
  {
    USB.print(F("3. AES encryption configured (1:enabled; 0:disabled):"));
    USB.println(xbeeDM.encryptMode, DEC);
  } 
  else 
  {
    USB.println(F("3. Error calling 'setEncryptionMode()'"));
  }

  // Set encryption key
  xbeeDM.setLinkKey(encryptionKey);

  // check the AT commmand execution flag
  if (xbeeDM.error_AT == 0) 
  {
    USB.println(F("4. AES encryption key set OK"));
  } 
  else 
  {
    USB.println(F("4. Error calling 'setLinkKey()'"));
  }

  // 5. write values to XBee module memory
  xbeeDM.writeValues();

  // check the AT commmand execution flag
  if (xbeeDM.error_AT == 0) 
  {
    USB.println(F("5. Changes stored OK"));
  } 
  else 
  {
    USB.println(F("5. Error calling 'writeValues()'"));
  }

  USB.println(F("-------------------------------"));

  // Initialize Modbus communication baud rate
  slave.begin(9600, SOCKET0);

  //Print hello message
  USB.println("Modbus communication over RS-232 - Turbidity Sensor ");
  delay(100);
  RTC.ON();

  // slave.readHoldingRegisters(0,20);
  result = slave.readHoldingRegisters(0, 20);

  // Area 9
  // set RTC time
  error = xbeeDM.setRTCfromMeshlium(RX_ADDRESS);

  // check flag
  if (error == 0) 
  {
    USB.print(F("SET RTC ok. "));
  } 
  else 
  {
    USB.print(F("SET RTC error. "));
  }

  USB.print(F("RTC Time:"));
  USB.println(RTC.getTime());

  delay(500);
}

//================================================================================
//                              Run Loop   
//================================================================================

void loop() 
{

  xbeeDM.ON(SOCKET1);
  delay(200);

  // Show the remaining battery level
  USB.print(F("Battery Level: "));
  USB.print(PWR.getBatteryLevel(), DEC);
  USB.print(F(" %"));

  // Show the battery Volts
  USB.print(F(" | Battery (Volts): "));
  USB.print(PWR.getBatteryVolts());
  USB.println(F(" V"));

  delay(500);

  // Initialize Modbus communication baud rate
  slave.begin(9600, SOCKET0);

  //Print hello message
  USB.println("Modbus communication over RS-232 - Turbidity Sensor MG");
  delay(100);
  RTC.ON();

  // slave.readHoldingRegisters(0,20);
  result = slave.readHoldingRegisters(0, 20);

  //================================================================================
  //                       For float point variable 

  // For float point variable

  union 
  {
    unsigned int i[2];
    float f;
  }
  foo;

  result = slave.readHoldingRegisters(0, 20);
  delay(200);

  if (result != 0) 
  {
    //If no response from the slave, print an error message. 
    USB.print("Communication error. Couldn't read from slave: ");
    USB.println(result);
    delay(200);
  } 
  else
  {

    //================================================================================
    //                       For float point variable 

    // Register 2 3
    USB.println("\n Temp");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(2); // Part 2 - address inside getResponseBuffer it is the register address.
    foo.i[1] = slave.getResponseBuffer(3); // Part 3 - address inside getResponseBuffer it is the register address.
    // USB.println(foo.f);
    temp = foo.f;
    USB.println(temp);
    Utils.float2String(temp, temp2string, 3);
    //USB.println(temp2string);

    // Register 0 1
    USB.println("\n Battery");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(0); // Part 1 - address inside getResponseBuffer it is the register address.
    foo.i[1] = slave.getResponseBuffer(1); // Part 2 - address inside getResponseBuffer it is the register address.
    USB.println(foo.f);
    battery = foo.f;
    Utils.float2String(battery, battery2srt, 3);
    //USB.println(battery2srt);

    // Register 6 7
    USB.println("\n pH");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(6);
    foo.i[1] = slave.getResponseBuffer(7);
    USB.println(foo.f);
    pH = foo.f;
    USB.println("\n Print PH Number");
    Utils.float2String(pH, number2, 3);
    //USB.println(number2); 

    // Register 6 7
    USB.println("\n ORP");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(8);
    foo.i[1] = slave.getResponseBuffer(9);
    USB.println(foo.f);
    orp = foo.f;
    Utils.float2String(orp, number3, 3);
    //USB.println(number3);

    // Register 8 9
    USB.println("\n Turbidity ");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(10);
    foo.i[1] = slave.getResponseBuffer(11);
    USB.println(foo.f);
    turb = foo.f;
    Utils.float2String(turb, number4, 3);
    //USB.println(number4);

    // Register 10 11
    USB.println("\n OD");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(12);
    foo.i[1] = slave.getResponseBuffer(13);
    USB.println(foo.f);
    od = foo.f;
    Utils.float2String(od, number5, 3);
    //USB.println(number5);

    // Register 12 13
    USB.println("\n Bat_Sonda");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(14);
    foo.i[1] = slave.getResponseBuffer(15);
    //USB.println(foo.f);
    bat_sonda = foo.f;
    Utils.float2String(bat_sonda, bat_sonda2str, 3);
    USB.println(bat_sonda2str);

    // Register 14 15
    USB.println("\n Alim Sonda");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(16);
    foo.i[1] = slave.getResponseBuffer(17);
    //USB.println(foo.f);
    alim_sonda = foo.f;
    Utils.float2String(alim_sonda, alim_sonda2str, 3);
    USB.println(alim_sonda2str);

    // Register 16 17
    USB.println("\n Wipper mA");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(18);
    foo.i[1] = slave.getResponseBuffer(19);
    //USB.println(foo.f);
    wipper = foo.f;
    Utils.float2String(wipper, wipper2str, 3);
    USB.println(wipper2str);
    USB.println("Passed wiper");
  }
  USB.println("\n====================================== \n");
  USB.print("\n");
  delay(1000);

  //Clear the response buffer. 
  slave.clearResponseBuffer();
  delay(500);
  USB.println(F("Send Frist Frame"));
  //=======================================
  // 1. Create ASCII frame (First Frame)

  //  frame.createFrame(MAX_FRAME); 
  //or ASCII
  frame.createFrame(ASCII);

  // add frame fields
  frame.addSensor(SENSOR_TCA, temp);
  frame.addSensor(SENSOR_PH, number2);
  frame.addSensor(SENSOR_ORP, number3);
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());
  frame.showFrame();

  // Send packet
  error = xbeeDM.send(RX_ADDRESS, frame.buffer, frame.length);
  // check TX flag
  if (error == 0) 
  {
    USB.println(F("send ok"));
    
  } 
  else 
  {
    counter = 1;
    USB.println(F("Start LOOP 1 to 3 "));
    while (counter < 3) // You can change the retries here 
    {

      USB.println(F("Send Packet Again"));
      delay(5000); // % sec Delay for the loop to try again !0000 = 10 seconds

      error = xbeeDM.send(RX_ADDRESS, frame.buffer, frame.length);
      // check TX flag

      if (error == 0)
      {
        USB.println(F("Send Ok"));
        break; //If the radio recives a TX flag of 0 this will break out of the loop
      } 
      else 
      {
        USB.println(F("Faled Again"));
        counter++;
        USB.println(counter);
      }
    }

  }
 
  USB.println(F("Send Second Frame"));
  //=======================================
  // Create ASCII frame (Second Frame)
  //  frame.createFrame(MAX_FRAME); 
  //or ASCII
  frame.createFrame(ASCII);
  frame.addSensor(SENSOR_TURB, number4);
  frame.addSensor(SENSOR_DO, number5);
  frame.addSensor(SENSOR_WV, wipper);
  frame.addSensor(SENSOR_BAT, battery);
  frame.showFrame();

  // Send packet

  // send XBee packet
  error = xbeeDM.send(RX_ADDRESS, frame.buffer, frame.length);
  // check TX flag
  if (error == 0) 
  {
    USB.println(F("send ok"));
    // blink green LED    
    Utils.blinkGreenLED();
  } 
  else
  {
    counter = 1;
    USB.println(F("Start LOOP 1 to 3 "));

    while (counter < 3) // You can change the retries here 
    {
      USB.println(F("Send Packet Again"));
      delay(5000); // 5 sec Delay for the loop to try again !0000 = 10 seconds
      error = xbeeDM.send(RX_ADDRESS, frame.buffer, frame.length);
      // check TX flag

      if (error == 0)
      {
        USB.println(F("Send Ok"));
        break; //If the radio recives a TX flag of 0 this will break out of the loop
      } 
      else 
      {
        USB.println(F("Faled Again"));
        counter++;
        USB.println(counter);
      }
    }
  }

  //=======================================

  USB.println(F("\n++++++++++++++ 50 Sec Time Off-Set ++++++++++++++++"));
  delay(50000);
}
