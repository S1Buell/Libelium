
//Changes
// 1.0 Set Pan ID (Line 27)
// 2.0 Set MAC ID (Line 32)
// 3.0 Set Waspmote ID (Line 45)
// 4.0 Set Channel (Line 51)
// 5.0 Set Encryption On/Off (Line 72)
// 6.0 Set Encrypton Key (Line 76)
// 7.0 Set Waspmote ID (Radio Name) (Line 102)
// 8.0 Set Network Retries (Line 112)
// 9.0 Set Radio Power Output (Line 119)
// 10.0 Set Wake Time (Line 255)
// 11.0 Set Router Wake Duration (Line 402)

    #include <WaspXBeeDM.h>
    #include <WaspFrame.h>



    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%   Set Variables %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 //   #define ALL_OFF_SLEEP SENS_OFF | ALL_OFF | SOCKET0_ON 
 
//1.0 Set Pan ID
    // PAN (Personal Area Network) Identifier
    uint8_t  panID[2] = {0x12,0x34}; 


//2.0 Set MAC ID 
    // Destination MAC address
    //////////////////////////////////////////
    char RX_ADDRESS[] = "0013A200408DE1A8";
    //////////////////////////////////////////

    //OR

    // Define BROADCAST MAC address
    //////////////////////////////////////////
    //char RX_ADDRESS[] = "000000000000FFFF";
    //////////////////////////////////////////

//3.0 Set Waspmote ID
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // Define the Waspmote ID
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    char WASPMOTE_ID[] = "R3-BH-Lab";

// 4.0 Set Channel
    // Define Freq Channel to be set: 
    // Digimesh 2.4Ghz. Range from 0x0B to 0x1A
    // Digimesh 900Mhz. Range from 0x00 to 0x0B
    uint8_t  channel = 0x00;

    /* 
    0x00 – Channel 0 -- 902 – 904,16 GHz
    0x01 – Channel 1 --  904,16 – 906,32 GHz
    0x02 – Channel 2 -- 906,32 – 908,48 GHz
    0x03 – Channel 3 -- 908,48 – 910,64 GHz
    0x04 – Channel 4 -- 910,64 – 912,80 GHz
    0x05 – Channel 5 -- 912,80 – 914,96 GHz
    0x06 – Channel 6 -- 914,96 – 917,12 GHz
    0x07 – Channel 7 -- 917,12 – 919,28 GHz
    0x08 – Channel 8 -- 919,28 – 921,44 GHz
    0x09 – Channel 9 -- 921,44 – 923,6 GHz
    0x0A – Channel 10 -- 923,6 – 925,76 GHz
    0x0B – Channel 11 -- 925,76 – 928 GHz
    */

// 5.0 Set Encryption On/Off
    // Define the Encryption mode: 1 (enabled) or 0 (disabled)
    uint8_t encryptionMode = 0;

// 6.0 Set Encrypton Key
    // Define the AES 16-byte Encryption Key
    char  encryptionKey[] = "WaspmoteIIOTKey!";
     
    // define variable
    uint8_t error;

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%   Setup Loop %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
    void setup()
    {
      // open USB port
      USB.ON();
    
      USB.println(F("-------------------------------"));
      USB.println(F("Configure XBee Digimesh"));
      USB.println(F("-------------------------------"));
  
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%   Radio Settings  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
      // init XBee 
      xbeeDM.ON();   

//7.0 Set Waspmote ID (Radio Name)
    /////////////////////////////////////
    // Set Radio Identifier
    /////////////////////////////////////
     xbeeDM.setNodeIdentifier(WASPMOTE_ID);
     xbeeDM.getNodeIdentifier();
      
      // store Waspmote identifier in EEPROM memory
      frame.setID( WASPMOTE_ID );

//8.0 Set Network Retries
    /////////////////////////////////////
    // Set Mesh Network Retries
    /////////////////////////////////////
      xbeeDM.setMeshNetworkRetries(0x07);  
      xbeeDM.getMeshNetworkRetries();  
  
// 9.0 Set Radio Power Output
    /////////////////////////////////////
    // Set Radio Power Level 
    /////////////////////////////////////
    
    /*
    Parameter   XBee-PRO
    0            10dBm
    1            12dBm
    2            14dBm
    3            16dBm 
    4            18dBm
    */
    
    xbeeDM.setPowerLevel(4);
    xbeeDM.getPowerLevel();

    /////////////////////////////////////
    //  Set channel 
    /////////////////////////////////////
    
    xbeeDM.setChannel( channel );
  
    // check at commmand execution flag
    if( xbeeDM.error_AT == 0 ) 
    {
      USB.print(F("1. Channel set OK to: 0x"));
      USB.printHex( xbeeDM.channel );
      USB.println();
    }
    else 
    {
      USB.println(F("1. Error calling 'setChannel()'"));
    }

     /////////////////////////////////////
     // 2. set PANID
     /////////////////////////////////////
      
       xbeeDM.setPAN(panID);
    
      // check the AT commmand execution flag
      if( xbeeDM.error_AT == 0 ) 
      {
        USB.print(F("2. PAN ID set OK to: 0x"));
        USB.printHex( xbeeDM.PAN_ID[0] ); 
        USB.printHex( xbeeDM.PAN_ID[1] ); 
        USB.println();
      }
      else 
      {
        USB.println(F("2. Error calling 'setPAN()'"));  
      }
    
      /////////////////////////////////////
      // 3. set encryption mode (1:enable; 0:disable)
      /////////////////////////////////////
      xbeeDM.setEncryptionMode( encryptionMode );
    
      // check the AT commmand execution flag
      if( xbeeDM.error_AT == 0 ) 
      {
        USB.print(F("3. AES encryption configured (1:enabled; 0:disabled):"));
        USB.println( xbeeDM.encryptMode, DEC );
      }
      else 
      {
        USB.println(F("3. Error calling 'setEncryptionMode()'"));
      }
    
      /////////////////////////////////////
      // Set encryption key
      /////////////////////////////////////
      xbeeDM.setLinkKey( encryptionKey );
    
      // check the AT commmand execution flag
      if( xbeeDM.error_AT == 0 ) 
      {
        USB.println(F("4. AES encryption key set OK"));
      }
      else 
      {
        USB.println(F("4. Error calling 'setLinkKey()'")); 
      }
    
      /////////////////////////////////////
      // 5. write values to XBee module memory
      /////////////////////////////////////
      xbeeDM.writeValues();
    
      // check the AT commmand execution flag
      if( xbeeDM.error_AT == 0 ) 
      {
        USB.println(F("5. Changes stored OK"));
      }
      else 
      {
        USB.println(F("5. Error calling 'writeValues()'"));   
      }
    
      USB.println(F("-------------------------------")); 
      
    
       
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%   Run Loop %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    void loop()
    {

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // %%%%%%%%%%%%%%%%%%% Router sleep %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    
      USB.println(F("\n++++++++++++++ Alarm 1 - ABSOLUTE MODE ++++++++++++++++"));
      
      // Setting time
      RTC.ON(); 
      USB.print(F("Time: "));
      USB.println(RTC.getTime());
      
    ///////////////////////////////////////////
    // Wake Roughter Every 50min - ABSOLUTE MODE - Wake Router
    ///////////////////////////////////////////
        /*
      RTC_ALM1_MODE1: Day, hours, minutes and seconds match 
      RTC_ALM1_MODE2: Date, hours, minutes and seconds match 
      RTC_ALM1_MODE3: Hours, minutes and seconds match 
      RTC_ALM1_MODE4: Minutes and seconds match 
      RTC_ALM1_MODE5: Seconds match 
      RTC_ALM1_MODE6: Once per second 
    */

//10.0 Set Wake Time
      // Setting alarm 1 in absolute mode using RTC_ALM1_MODE4:
      // This will wake the router every hout when the RTC clock reads 50:00 min
      // Alarm Delay is set for 10min Later 
      RTC.setAlarm1("00:00:55:00",RTC_ABSOLUTE,RTC_ALM1_MODE4);
      
      // Checking Alarm 1  
      USB.println(F("Wake Router Mode: "));
      USB.println(RTC.getAlarm1());
      
      // Setting Waspmote to Low-Power Consumption Mode
      USB.println(F("Waspmote goes into sleep mode until the RTC alarm causes an interrupt"));
      PWR.sleep(ALL_OFF);
      
      // After setting Waspmote to power-down, UART is closed, so it
      // is necessary to open it again
      USB.ON();
      RTC.ON(); 
      USB.println(F("\r\nWaspmote wake up!!"));
      USB.print(F("Time: "));
      USB.println(RTC.getTime());
      
      // Waspmote wakes up at '11:25:15'
      if( intFlag & RTC_INT )
      {
        intFlag &= ~(RTC_INT); // Clear flag
       // Utils.blinkLEDs(1000); // Blinking LEDs
       // Utils.blinkLEDs(1000); // Blinking LEDs
      }
      
      USB.println();

    // %%%%%%%%%%%%%%%%%%% Router sleep END %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     // init XBee 
      xbeeDM.ON();   
     /////////////////////////////////////
     // Set Time From Gateway 
     /////////////////////////////////////

    // set RTC time
      error = xbeeDM.setRTCfromMeshlium(RX_ADDRESS);
          
      // check flag
      if( error == 0 )
      {
        USB.print(F("SET RTC ok. "));
      }
      else 
      {
        USB.print(F("SET RTC error. "));
      }  
      
      USB.print(F("RTC Time:"));
      USB.println(RTC.getTime());
      
      delay(2000);

      
      /////////////////////////////////////
      // Get channel 
      /////////////////////////////////////
      xbeeDM.getChannel();
      USB.print(F("channel: "));
      USB.printHex(xbeeDM.channel);
      USB.println();
    
      /////////////////////////////////////
      // 2. get PAN ID
      /////////////////////////////////////
      xbeeDM.getPAN();
      USB.print(F("panid: "));
      USB.printHex(xbeeDM.PAN_ID[0]); 
      USB.printHex(xbeeDM.PAN_ID[1]); 
      USB.println(); 
      
      /////////////////////////////////////
      // 3. get Encryption mode (1:enable; 0:disable)
      /////////////////////////////////////
      xbeeDM.getEncryptionMode();
      USB.print(F("encryption mode: "));
      USB.printHex(xbeeDM.encryptMode);
      USB.println(); 
      
      USB.println(F("------------------------------")); 
         
      delay(3000);


    ///////////////////////////////////////////
    // Create Binnary frame
    /////////////////////////////////////////// 

    //frame.createFrame(MAX_FRAME);  
    // USB.println(frame.getFrameSize(),DEC);
      
    //  OR
  
    ///////////////////////////////////////////
    // Create ASCII frame
    ///////////////////////////////////////////  

    // create new frame
    frame.createFrame(ASCII);  
  
    /*
   // add frame fields
   //frame.addSensor(SENSOR_STR, "new_sensor_frame");
  
    frame.addSensor(SENSOR_DATE, RTC.date, RTC.month, RTC.year);
    frame.addSensor(SENSOR_TIME, RTC.hour, RTC.minute, RTC.second);
    */
    frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel()); 
    
    USB.println(F("-------------------------------"));
    USB.println(F("Send Packet"));
    USB.println(F("-------------------------------"));
  
    ///////////////////////////////////////////
    // Send packet
    ///////////////////////////////////////////  

    // send XBee packet
    error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );   
    
    // check TX flag
    if( error == 0 )
    {
      USB.println(F("send ok"));
      
      // blink green LED    
     // Utils.blinkGreenLED();
      
    }
    else 
    {
     USB.println(F("send error"));
      
      // blink red LED
     // Utils.blinkRedLED();
    }

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    // %%%%%%%%%%%%%%%%%%% Router Awake for 10min  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// 11.0 Set Router Wake Duration
    USB.println(F("Router Awake for 10min"));
    delay(600000);

  
}

    

