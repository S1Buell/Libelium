/*  
 *  ------ [DM_09] - set low power state in XBee module  -------- 
 */

#include <WaspXBeeDM.h>
#include <WaspFrame.h>

#define ALL_OFF_ALEX SENS_OFF | UART0_OFF | UART1_OFF | BAT_OFF | RTC_OFF


// Define BROADCAST MAC address
//////////////////////////////////////////
char RX_ADDRESS[] = "000000000000FFFF";
//////////////////////////////////////////

// Define the Waspmote ID
char WASPMOTE_ID[] = "DIGI_Default_Sleep_PWR";


// define variable
uint8_t error;

// SP parameter: Time to be asleep -> 5 seconds: 0x0001F4 (hex format, time in units of 10ms)
// Other possible values: 
//   0x0003E8 (10 seconds)
//   0x0000C8 (2 seconds)
//   0x0005DC (15 seconds)
//   0x001770 (60 seconds)

//we don't use
uint8_t asleep[3]={ 0x00,0x17,0x70};

// ST parameter: Time to be awake -> 5 seconds: 0x001388 (hex format, time in units of 1ms)
// Other possible values: 
//   0x002710 (10 seconds)
//   0x0007D0 (2 seconds)
//   0x003A98 (15 seconds)
//   0x00EA60 (60 seconds)
//we don't use
uint8_t awake[3]={ 0x00,0x13,0x88};

// deifne variable to get running time
unsigned long startTime;


void setup()
{
  // Init USB port
  USB.ON();
  USB.println(F("Cyclic sleep example"));

  // init RTC 
  RTC.ON();

  //////////////////////////
  // 1. XBee setup
  //////////////////////////

  // 1.1. init XBee
  xbeeDM.ON();
  

  // 1.2. set time the module remains awake (ST parameter)
//  xbeeDM.setAwakeTime(awake);
  
//  // check AT command flag
//  if( xbeeDM.error_AT == 0 ) 
//  {
//    USB.println(F("ST parameter set ok"));
//  }
//  else 
//  {
//    USB.println(F("error setting ST parameter")); 
//  }
//
//  // 1.3. set Sleep period (SP parameter)
//  //xbeeDM.setSleepTime(asleep);
//  
//  // check AT command flag
//  if( xbeeDM.error_AT == 0 ) 
//  {
//    USB.println(F("SP parameter set ok"));
//  }
//  else 
//  {
//    USB.println(F("error setting SP parameter")); 
//  }

  // 1.4. set sleep mode for cyclic sleep mode
  xbeeDM.setSleepMode(8);  


  // store Waspmote identifier in EEPROM memory
  frame.setID( WASPMOTE_ID );
  delay(1000);
}


void loop()
{ 
 
   // init XBee
  xbeeDM.ON(); 
  
  ///////////////////////////////////////////////
  // 2. Waspmote sleeps while XBee sleeps
  ///////////////////////////////////////////////

  // Waspmote enters to sleep until XBee module wakes it up
  // It is important not to switch off the XBee module when
  // entering sleep mode calling PWR.sleep function
  // It is necessary to enable the XBee interrupt

  // get starting time
  startTime = RTC.getEpochTime();

  USB.println(F("Enter deep sleep..."));
  
  // 2.1. enables XBEE Interrupt
  enableInterrupts(XBEE_INT);

  USB.println(F("..."));

  // 2.2. Waspmote enters sleep mode
//  #define ALL_OFF_ALEX SENS_OFF | UART0_OFF | UART1_OFF | BAT_OFF | RTC_OFF

  PWR.sleep( SENS_OFF | BAT_OFF | RTC_OFF );

  USB.println(F("after PwrSleep..."));
  
  ///////////////////////////////////////////////
  // 3. Waspmote wakes up and check intFlag
  ///////////////////////////////////////////////
  USB.ON();

  USB.println(F("...wake up!"));

  // init RTC 
  RTC.ON();
  
  USB.print(F("Sleeping time (seconds):"));
  USB.println( RTC.getEpochTime() - startTime );
 
  
  // After waking up check the XBee interrupt
  if( intFlag & XBEE_INT )
  {
    // blink the red LED
    Utils.blinkRedLED();

    USB.println(F("--------------------"));
    USB.println(F("XBee interruption captured!!"));
    USB.println(F("--------------------"));
    
    intFlag &= ~(XBEE_INT); // Clear flag
  }

  /* Application transmissions should be done here when XBee
   module is awake for the defined awake time. All operations
   must be done during this period before teh XBee modules enters
   a sleep period again*/

  // do nothing while XBee module remains awake before 
  // return to sleep agains after 'awake' seconds
  
  
  ///////////////////////////////////////////
  // 4.1. Create ASCII frame
  ///////////////////////////////////////////  

  // create new frame
  frame.createFrame(ASCII);  
  
  // add frame fields
  frame.addSensor(SENSOR_STR, "new_sensor_frame");
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel()); 
  

  ///////////////////////////////////////////
  // 4.2. Send packet
  ///////////////////////////////////////////  

  // send XBee packet
  error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );   
  
  // check TX flag
  if( error == 0 )
  {
    USB.println(F("send ok"));
    
    // blink green LED
    Utils.blinkGreenLED();
    
  }
  else 
  {
    USB.println(F("send error"));
    
    // blink red LED
    Utils.blinkRedLED();
  }

  // wait for one second
  delay(1000);
}
