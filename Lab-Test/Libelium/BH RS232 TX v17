
// Coded created by Alex and Tom Nov 13 2017
// Alex Calegari Fracaroli C0479831@vale.com
// Tom Massicotte Tom.massicotte@vale.com

//Changes
// Area #1.0 Set Pan ID 
// Area #2.0 Set MAC ID 
// Area #3.0 Set Waspmote ID 
// Area #4.0 Set Channel 
// Area #5.0 Set Modbus Slave ID 
// Area #6.0 Float Sensor Data 
// Area #7.0 Set Network Retries 
// Area #8.0 Set Radio Power Output 
// Area #9.0 Sync Time to Gateway
// Area #10.0 Set Router Wake Time (Every houre 57min)
// Area #11.0 Modbus Sensor Collection From Data Logger
// Area #12.0 Sensor Time Offset Sleep (for 14min)


#include <Wasp232.h>
#include <ModbusMaster232.h>
#include <WaspXBeeDM.h>
#include <WaspFrame.h>

//================================================================================
//                      Set Variables
//================================================================================
 
//Area #1 Set Pan ID
      // PAN (Personal Area Network) Identifier
        uint8_t  panID[2] = {0x12, 0x34};

//Area #2 Set MAC ID 
       // Destination MAC address
       char RX_ADDRESS[] = "0013A200408DE1A8";
      //OR
      // Define BROADCAST MAC address
      //char RX_ADDRESS[] = "000000000000FFFF";
      
//Area #3 Set Waspmote ID
      char WASPMOTE_ID[] = "Turbidity test";

// Area #4 Set Channel
      uint8_t  channel = 0x00;
    /*
    0x00 – Channel 0 -- 902 – 904,16 GHz
    0x01 – Channel 1 --  904,16 – 906,32 GHz
    0x02 – Channel 2 -- 906,32 – 908,48 GHz
    0x03 – Channel 3 -- 908,48 – 910,64 GHz
    0x04 – Channel 4 -- 910,64 – 912,80 GHz
    0x05 – Channel 5 -- 912,80 – 914,96 GHz
    0x06 – Channel 6 -- 914,96 – 917,12 GHz
    0x07 – Channel 7 -- 917,12 – 919,28 GHz
    0x08 – Channel 8 -- 919,28 – 921,44 GHz
    0x09 – Channel 9 -- 921,44 – 923,6 GHz
    0x0A – Channel 10 -- 923,6 – 925,76 GHz
    0x0B – Channel 11 -- 925,76 – 928 GHz
    */

//Area #5 Set Pan ID
    // Instantiate ModbusMaster object as slave ID 1
      ModbusMaster232 slave(1);

//Area #6 Float Sensor Data
      // Float Sensor Data and define char names for sensor data
        uint8_t error;
        float battery = 0;
        float battery_min = 0;
        float inc = 0;
        float temp = 0;
        float pH;
        float orp = 0;
        float turb = 0;
        float od = 0;
        float bat_sonda = 0;
        float alim_sonda = 0;
        float wipper = 0;

        // Water Temp
        char temp2string[20] = "nd";
        
        //Solar Battery Level
        char battery2srt[20] = "nd";
        
        // Ph Value
        char number2[20];
        
        // ORP Vale
        char number3[20];
        
        // Trubidity
        char number4[20];
        
        // OD Sensor
        char number5[20];
        
        //Betery voltage inside the Sensor
        char bat_sonda2str[20] = "nd";
        
        //Voltage recived by sensor
        char alim_sonda2str[20] = "nd";
        
        // Wiper amp used
        char wipper2str[20] = "nd";

        int result;

// Define SD Data Storage to Store Data
          char path[] = "/data";
          char filename[] = "/data/log";
      
          // buffer to write into Sd File
          char toWrite[200];
      
          // define variables to read stored frames
         uint8_t frameSD[MAX_FRAME + 1];
         uint16_t lengthSD;
         int32_t numLines;
         
        // variables to define the file lines to be read
        int32_t  diskSize;   
        int startLine;
        int endLine;
        int countFrames = 0;
        int countFramesWhlie = 0;
        int sendok = 0;
        int senderror = 0;
        
        // define variable
        uint8_t sd_answer;
        
        void pegaEnvia (char filename[]);

//END Variables =================================================================

//================================================================================
//                      Setup Loop
//================================================================================

      void setup()
{
          
          USB.ON();
          SD.ON();
        
          USB.println("Modbus communication over RS-232 - Turbidity Sensor MG");
        
          //Waspmote identifier in EEPROM memory
          frame.setID(WASPMOTE_ID);
          // init XBee
          xbeeDM.ON(SOCKET1);
          //painID
          xbeeDM.setPAN(panID);
        //set Channel
          xbeeDM.setChannel( channel );
          xbeeDM.getChannel();
          delay(1000);
            // check at commmand execution flag
          if( xbeeDM.error_AT == 0 ) 
          {
            USB.print(F("Channel set OK to: 0x"));
            USB.printHex( xbeeDM.channel );
            USB.println();
          }
            else 
          {
            USB.println(F("Error calling 'setChannel()'"));
          }  
//================================================================================
//Area #7 Set Network Retries for Mesh Network
      xbeeDM.setMeshNetworkRetries(0x07);  
      xbeeDM.getMeshNetworkRetries();  

//================================================================================
//Area #8 Set Radio Power Output
          /*
          Parameter   XBee-PRO
          0            10dBm
          1            12dBm
          2            14dBm
          3            16dBm 
          4            18dBm
          */
          xbeeDM.setPowerLevel(4);  
          xbeeDM.getPowerLevel();  
                 
          // Set Radio Identifier
          xbeeDM.setNodeIdentifier(WASPMOTE_ID);
          xbeeDM.getNodeIdentifier();              
        
          // 5. write values to XBee module memory
          xbeeDM.writeValues();
        
          // check the AT commmand execution flag
          if( xbeeDM.error_AT == 0 ) 
          {
            USB.println(F("Changes stored OK"));
          }
          else 
          {
            USB.println(F("Error calling 'writeValues()'"));   
          }
        
          // Initialize Modbus communication baud rate
          slave.begin(9600, SOCKET0);
        
          delay(100);
          RTC.ON();
        
          // slave.readHoldingRegisters(0,20);
          result =  slave.readHoldingRegisters(0, 20);

// Area #9  ================================================================================
// Sync Time to Gateway   
                      
          int errorSinc=0;
        
          while(errorSinc<2)
          {
            // set RTC time
            error = xbeeDM.setRTCfromMeshlium(RX_ADDRESS);
            // check flag
          
            if ( error == 0 )
            {
              USB.print(F("SET RTC ok. "));
              errorSinc=5;
            }
            else
            {
              USB.print(F("SET RTC error. "));
              errorSinc++;
            }
          }
         
          USB.print(F("RTC Time:"));
          USB.println(RTC.getTime());
          delay(2000);
        
          // create path FILE
          sd_answer = SD.mkdir(path);
          
          if( sd_answer == 1 )
          { 
            USB.println(F("path created"));
          }
          else
          {
            USB.println(F("mkdir failed"));
          }
         
          // Create file for Waspmote Frames
          sd_answer = SD.create(filename);
          
          if( sd_answer == 1 )
          { 
            USB.println(F("/data/log created"));
          }
          else
          {
            USB.println(F("/data/log not created"));
          }
         
}

//================================================================================
//                              Run Loop   
//================================================================================
void loop()
{

//Area #10 Set Wake Time. What time do you want the router to wake up?
          // Setting alarm 1 in absolute mode using RTC_ALM1_MODE4: (RTC_ALM1_MODE4: Minutes and seconds match )
          // This will wake the Sensor every hour when the RTC clock reads 59:00 min
          // Then it will sleep for 14 min and awake again and send data repeating this loop 3 times
            /*
            RTC_ALM1_MODE1: Day, hours, minutes and seconds match 
            RTC_ALM1_MODE2: Date, hours, minutes and seconds match 
            RTC_ALM1_MODE3: Hours, minutes and seconds match 
            RTC_ALM1_MODE4: Minutes and seconds match 
            RTC_ALM1_MODE5: Seconds match 
            RTC_ALM1_MODE6: Once per second 
            */
          
        USB.println("+++++++++++++++++++++++ Sleep: Aguardando o Alarm (XX:59:00) +++++++++++++++++++++++++++ ");
        RTC.setAlarm1("00:00:59:00", RTC_ABSOLUTE, RTC_ALM1_MODE4);
        PWR.sleep(ALL_OFF);
        USB.ON();
        RTC.ON();
        delay(100);
        //  SD.ON();
        slave.begin(9600, SOCKET0);
        delay(200);
      
        // INTERRUPÇÃO PARA SLEEP AND WAKE NA HORA DETERMINADA
        if ( intFlag & RTC_INT )
        {
          intFlag &= ~(RTC_INT); // Clear flag
          USB.println("----------------------------- Acorda na hora determinada ------------------------------- ");
      
          while (countFramesWhlie <= 4)
          {

        // init XBee
        xbeeDM.ON(SOCKET1);
        delay(200);
        RTC.ON();
        delay(100);
        SD.ON();
          
        // For float point variable
        union
        {
          unsigned int i[2];
          float f;
        } foo;
        
        result =  slave.readHoldingRegisters(0, 20);
        delay(200);
  
        if (result != 0)
        {
          //If no response from the slave, print an error message.
          USB.print("Communication error. Couldn't read from slave: ");
          USB.println(result);
          delay(200);
        }
        else
        {

//Area #11 ====================== Sensor Collection From Data Logger=====================
                       
          // Read Register 2 4
          USB.println("\n Temp");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(2); // Part 1 - address inside getResponseBuffer it is the register address.
          foo.i[1] = slave.getResponseBuffer(3); // Part 2 - address inside getResponseBuffer it is the register address.
          // USB.println(foo.f);
          temp = foo.f;
          USB.println(temp);
          Utils.float2String(temp, temp2string, 3);
          //  USB.println(temp2string);
  
          // Read Register 0 1
          USB.println("\n Battery");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(0); // Part 1 - address inside getResponseBuffer it is the register address.
          foo.i[1] = slave.getResponseBuffer(1); // Part 2 - address inside getResponseBuffer it is the register address.
          USB.println(foo.f);
          battery = foo.f;
          Utils.float2String(battery, battery2srt, 3);
          //    USB.println(battery2srt);
  
          // Read Register 6 7
          USB.println("\n pH");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(6);
          foo.i[1] = slave.getResponseBuffer(7);
          USB.println(foo.f);
          pH = foo.f;
          USB.println("\n Print PH Number");
          Utils.float2String(pH, number2, 3);
          //   USB.println(number2);
  
          // Read Register 6 7
          USB.println("\n ORP");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(8);
          foo.i[1] = slave.getResponseBuffer(9);
          USB.println(foo.f);
          orp = foo.f;
          Utils.float2String(orp, number3, 3);
          //  USB.println(number3);
  
          // Read Register 8 9
          USB.println("\n Turbidity ");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(10);
          foo.i[1] = slave.getResponseBuffer(11);
          USB.println(foo.f);
          turb = foo.f;
          Utils.float2String(turb, number4, 3);
          //  USB.println(number4);
  
          // Read Register 10 11
          USB.println("\n OD");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(12);
          foo.i[1] = slave.getResponseBuffer(13);
          USB.println(foo.f);
          od = foo.f;
          Utils.float2String(od, number5, 3);
          //    USB.println(number5);
  
          // Read Register 12 13
          USB.println("\n Bat_Sonda");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(14);
          foo.i[1] = slave.getResponseBuffer(15);
          //  USB.println(foo.f);
          bat_sonda = foo.f;
          Utils.float2String(bat_sonda, bat_sonda2str, 3);
          USB.println(bat_sonda2str);
  
          // Read Register 14 15
          USB.println("\n Alim Sonda");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(16);
          foo.i[1] = slave.getResponseBuffer(17);
          //  USB.println(foo.f);
          alim_sonda = foo.f;
          Utils.float2String(alim_sonda, alim_sonda2str, 3);
          USB.println(alim_sonda2str);
  
          // Read Register 16 17
          USB.println("\n Wipper mA");
          USB.print(F("\t"));
          foo.i[0] = slave.getResponseBuffer(18);
          foo.i[1] = slave.getResponseBuffer(19);
          //  USB.println(foo.f);
          wipper = foo.f;
          Utils.float2String(wipper, wipper2str, 3);
          USB.println(wipper2str);
          USB.println(" Passed wiper");
        }
  
        USB.println("\n=======================================================================================\n");
        USB.print("\n");
        delay(500);
  
        //Clear the response buffer.
        slave.clearResponseBuffer();
        delay(500);
    
        // create new frame
        // frame.createFrame(MAX_FRAME);
        frame.createFrame(ASCII);
  
        // add frame fields
        frame.addSensor(SENSOR_TCA, temp);
        //frame.addSensor(SENSOR_STR, battery2srt);
        frame.addSensor(SENSOR_PH, number2);
        frame.addSensor(SENSOR_ORP, number3);
  
        frame.showFrame();
  
        //Part one of the Frame
        /////////////////////////////////////////
        // DATA LOGGER 1
        ////////////////////////////////////////
  
        // Inicializa o array toWrite com 0
        memset(toWrite, 0x00, sizeof(toWrite) );
        // Conversion from Binary to ASCII
        Utils.hex2str( frame.buffer, toWrite, frame.length);
        // Imprime o buffer armazenado em toWrite
        USB.print(F("Frame to be stored:"));
        USB.println(toWrite);
  
        /////////////////////////////////////////////////////
        //Append data into file
        /////////////////////////////////////////////////////
  
        // grava o frame no arquivo
        sd_answer = SD.appendln(filename, toWrite);
  
        if ( sd_answer == 1 )
        {
          USB.println(F("Frame appended to file"));
        }
        else
        {
          USB.println(F("Append failed"));
        }
  
  
        ///////////////////////////////////////////
        // Create ASCII frame
        ///////////////////////////////////////////
  
        // create new frame
        //frame.createFrame(MAX_FRAME);
        frame.createFrame(ASCII);
        frame.addSensor(SENSOR_TURB, number4);
        frame.addSensor(SENSOR_DO, number5);
        //frame.addSensor(SENSOR_STR, bat_sonda2str);
        //frame.addSensor(SENSOR_STR, alim_sonda2str);
        frame.addSensor(SENSOR_WV, wipper);
        //frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());
        frame.addSensor(SENSOR_BAT, battery);
  
        frame.showFrame();
  
        /////////////////////////////////////////
        // DATA LOGGER 2
        ////////////////////////////////////////
  
        // Inicializa o array toWrite com 0
        memset(toWrite, 0x00, sizeof(toWrite) );
        // Conversion from Binary to ASCII
        Utils.hex2str( frame.buffer, toWrite, frame.length);
        // Imprime o buffer armazenado em toWrite
        USB.print(F("Frame to be stored:"));
        USB.println(toWrite);
  
        /////////////////////////////////////////////////////
        // 2. Append data into file
        /////////////////////////////////////////////////////
  
        // grava o frame no arquivo
        sd_answer = SD.appendln(filename, toWrite);
  
        if ( sd_answer == 1 )
        {
          USB.println(F("Frame appended to file"));
        }
        else
        {
          USB.println(F("Append failed"));
        }
  
        //Loop Count
        countFramesWhlie++;
        pegaEnvia(filename);
        //SD.showFile(filename);

//Area #12 ====================== Sensor Time Offset Sleep for 14min=====================
        USB.println("+++++++++++++++++++++++++++++Dormir por 14min++++++++++++++++++++++++++++++++++ ");
        // Set time offset here
        RTC.setAlarm1("00:00:14:00", RTC_OFFSET, RTC_ALM1_MODE4);
  
        PWR.sleep(ALL_OFF);
        USB.ON();
        RTC.ON();
        delay(100);
        SD.ON();
        slave.begin(9600, SOCKET0);
  
        // INTERRUPÇÃO PARA SLEEP AND WAKE NA HORA DETERMINADA
        if ( intFlag & RTC_INT )
        {
          intFlag &= ~(RTC_INT); // Clear flag
          USB.println("-----------------------------Acorda depois de 14 min--------------------------- ");
        }
        USB.print(F("Time: "));
        USB.println(RTC.getTime());
    } //end while



    // get number of lines in file
    numLines = SD.numln(filename);

  //  pegaEnvia(filename);

    // set RTC time
    error = xbeeDM.setRTCfromMeshlium(RX_ADDRESS);

    // check flag
    if ( error == 0 )
    {
      USB.print(F("SET RTC ok. "));
    }
    else
    {
      USB.print(F("SET RTC error. "));
    }

    USB.print(F("RTC Time:"));
    USB.println(RTC.getTime());

    USB.println();

    USB.println("Show File: ");
    SD.showFile(filename);
    delay(500);

    countFramesWhlie = 0;

    // Setting time
    RTC.ON();
    USB.print(F("Time: "));
    USB.println(RTC.getTime());

  }//end if

}

void pegaEnvia (char filename[])
{
  int senderror=0;
  
  // get number of lines in file
  numLines = SD.numln(filename);
  startLine = numLines - 2;
  endLine = numLines;

//  USB.print("StartLine: ");
//  USB.println(startLine);

//  USB.print("Numero de Linhas: ");
///  USB.println(numLines);

  // iterate to get the File lines specified
  // O valor 3 é o numero de linhas que o
  for (int i = startLine; i < endLine ; i++)
  {
    // Get 'i' line -> SD.buffer
    SD.catln( filename, i, 1);

    // initialize frameSD
    memset(frameSD, 0x00, sizeof(frameSD) );

    // conversion from ASCII to Binary
    lengthSD = Utils.str2hex(SD.buffer, frameSD );

    // Conversion from ASCII to Binary
    USB.print(F("Get previously stored frame:"));

    for (int j = 0; j < lengthSD; j++)
    {
      USB.print(frameSD[j], BYTE);
    }
    USB.println();

    /************************************************
        At this point 'frameSD' and 'lengthSD' can be
        used as 'frame.buffer' and 'frame.length' to
        send information via some communication module
    *************************************************/

    xbeeDM.ON(SOCKET1);
    delay(100);
    xbeeDM.setPAN(panID);
    delay(100);

    while(senderror<3)
    {
      // send XBee packet
      error = xbeeDM.send( RX_ADDRESS, frameSD, lengthSD );
  
      // check TX flag
      if ( error == 0 )
      {
        USB.println(F("send ok"));
        senderror=3;
      }
      else
      {
        USB.println(F("send error"));
        // blink red LED
        Utils.blinkRedLED();
        senderror++;
      }
    }
    senderror=0;
  }

}

