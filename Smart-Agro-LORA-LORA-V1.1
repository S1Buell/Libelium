
/*  
 *  ----- [SX_06c] - TX to Meshlium (with ACKs) ----- 
 *
 *  Explanation: This example shows how to configure the semtech 
 *  module in LoRa mode and then send packets to Meshlium.
 *  For this purpose, Waspmote Frames must be used.
 *
 *  Copyright (C) 2014 Libelium Comunicaciones Distribuidas S.L. 
 *  http://www.libelium.com 
 *  
 *  This program is free software: you can redistribute it and/or modify  
 *  it under the terms of the GNU General Public License as published by  
 *  the Free Software Foundation, either version 3 of the License, or  
 *  (at your option) any later version.  
 *   
 *  This program is distributed in the hope that it will be useful,  
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of  
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 *  GNU General Public License for more details.  
 *   
 *  You should have received a copy of the GNU General Public License  
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 *  
 *  Version:           0.1
 *  Design:            David Gascón 
 *  Implementation:    Covadonga Albiñana, Yuri Carmona
 */

// Include this library to transmit with sx1272
#include <WaspSX1272.h>
#include <WaspFrame.h>
#include <WaspSensorAgr_v20.h>


// Define Variables
//variables to store sensors readings
float temperature;
float humidity;
float pressure;
float ldr;
uint8_t wetness;
float digitalTemperature;
float digitalHumidity;
float UVvalue;
float radiation;
float dendrometer;
float pt1000Temperature;
float watermark;
float anemometer;
float pluviometer1; //mm in current hour 
float pluviometer2; //mm in previous hour
float pluviometer3; //mm in last 24 hours
uint8_t vane;

// variable to store the number of pending pulses
int pendingPulses;

int e;


// define the Waspmote ID 
//////////////////////////////////////////
char nodeID[] = "SA_Vit_Node_8";
//////////////////////////////////////////

// Define the Meshlium address to send packets
// The default Meshlium address is '1'
uint8_t meshlium_address = 2;


void setup()
{
  // Init USB port
  USB.ON();
  USB.println(F("SA_Node_08_Test"));
  USB.println(F("Semtech SX1272 module. TX in LoRa to MESHLIUM (with ACKs)"));

  // Switch ON RTC
  RTC.ON();

  // Switch ON ACC
  ACC.ON();

  // set the Waspmote ID
  frame.setID(nodeID);  

  USB.println(F("----------------------------------------"));
  USB.println(F("Setting configuration:")); 
  USB.println(F("----------------------------------------"));
  
  // Init sx1272 module
  sx1272.ON();

  // Select frequency channel
  e = sx1272.setChannel(CH_12_900);
  USB.print(F("Setting Channel CH_12_900.\t state ")); 
  USB.println(e);

  // Select implicit (off) or explicit (on) header mode
  e = sx1272.setHeaderON();
  USB.print(F("Setting Header ON.\t\t state "));  
  USB.println(e); 

  // Select mode (mode 1)
  e = sx1272.setMode(1);  
  USB.print(F("Setting Mode '1'.\t\t state "));
  USB.println(e);  

  // Select CRC on or off
  e = sx1272.setCRC_ON();
  USB.print(F("Setting CRC ON.\t\t\t state "));
  USB.println(e); 

  // Select output power (Max, High or Low)
  e = sx1272.setPower('H');
  USB.print(F("Setting Power to 'H'.\t\t state ")); 
  USB.println(e); 

  // Select the node address value: from 2 to 255
  e = sx1272.setNodeAddress(5);
  USB.print(F("Setting Node Address to '5'.\t state "));
  USB.println(e);
  USB.println();

  delay(1000);

  USB.println(F("----------------------------------------"));
  USB.println(F("Sending:")); 
  USB.println(F("----------------------------------------"));
}


void loop()
{

  // get Time from RTC
  RTC.getTime();
  
 // Turn on the RTC
  RTC.ON();

// Turn on the sensor board
  SensorAgrv20.ON();
  

  /////////////////////////////////////////////
  // 1. Enter sleep mode
  /////////////////////////////////////////////
  SensorAgrv20.sleepAgr("00:00:00:00", RTC_ABSOLUTE, RTC_ALM1_MODE5, SOCKET0_OFF, SENS_AGR_PLUVIOMETER);
 
 /////////////////////////////////////////////
  // 2 Check interruptions
  /////////////////////////////////////////////
  //Check pluviometer interruption
  if( intFlag & PLV_INT)
  {
    USB.println(F("+++ PLV interruption +++"));

    pendingPulses = intArray[PLV_POS];

    USB.print(F("Number of pending pulses:"));
    USB.println( pendingPulses );

    for(int i=0 ; i<pendingPulses; i++)
    {
      // Enter pulse information inside class structure
      SensorAgrv20.storePulse();

      // decrease number of pulses
      intArray[PLV_POS]--;
    }

    // Clear flag
    intFlag &= ~(PLV_INT); 
  }
  
  //Check RTC interruption
  if(intFlag & RTC_INT)
  {
    USB.println(F("+++ RTC interruption +++"));
    
    // switch on sensor board
    SensorAgrv20.ON();
    
    RTC.ON();
    USB.print(F("Time:"));
    USB.println(RTC.getTime());        

    // measure sensors
    measureSensors();

    // Clear flag
    intFlag &= ~(RTC_INT); 
  }  
}

void measureSensors()
{  

    ///////////////////////////////////////////
  // 3. Turn on the sensors
  /////////////////////////////////////////// 

  // Power on the temperature sensor
  SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_TEMPERATURE);
  // Power on the humidity sensor
  SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_HUMIDITY);
  // Power on the pressure sensor
  SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_PRESSURE);
  // Power on the LDR sensor
       //SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_LDR);
  // Power on the leaf wetness sensor
      //SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_LEAF_WETNESS);
  // Power on Sensirion
  SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_SENSIRION);
  // Power on the ultraviolet sensor
      //SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_RADIATION);
  // Power on the dendrometer sensor
      //SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_DENDROMETER);
  // Power on the PT1000 sensor
      //SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_PT1000);
  // Power on the watermark sensor
      //SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_WATERMARK_1);
  // Power on the weather station sensor
  SensorAgrv20.setSensorMode(SENS_ON, SENS_AGR_ANEMOMETER);
  
  delay(100);
  
  ///////////////////////////////////////////
  // 4. Read sensors
  ///////////////////////////////////////////  
  
  //It takes several minutes to read all sensors

  // Read the temperature sensor 
        //temperature = SensorAgrv20.readValue(SENS_AGR_TEMPERATURE);
  // Read the humidity sensor
        //humidity = SensorAgrv20.readValue(SENS_AGR_HUMIDITY);
  // Read the pressure sensor
  pressure = SensorAgrv20.readValue(SENS_AGR_PRESSURE);
  // Read the LDR sensor 
        //ldr = SensorAgrv20.readValue(SENS_AGR_LDR);
  // Read the leaf wetness sensor 
        //wetness = SensorAgrv20.readValue(SENS_AGR_LEAF_WETNESS);
  // Read the digital temperature sensor 
  digitalTemperature = SensorAgrv20.readValue(SENS_AGR_SENSIRION, SENSIRION_TEMP);
  // Read the digital humidity sensor 
  digitalHumidity = SensorAgrv20.readValue(SENS_AGR_SENSIRION, SENSIRION_HUM);
  // Read the ultraviolet sensor 
        //UVvalue = SensorAgrv20.readValue(SENS_AGR_RADIATION);
  // Conversion from voltage into umol·m-2·s-1
        //radiation = UVvalue / 0.0002;
  // Read the dendrometer sensor 
        //dendrometer = SensorAgrv20.readValue(SENS_AGR_DENDROMETER);
  // Read the PT1000 sensor 
        //pt1000Temperature = SensorAgrv20.readValue(SENS_AGR_PT1000);
  // Read the watermark sensor 
        // watermark = SensorAgrv20.readValue(SENS_AGR_WATERMARK_1);
  // Read the anemometer sensor 
  anemometer = SensorAgrv20.readValue(SENS_AGR_ANEMOMETER);
  // Read the pluviometer sensor 
  pluviometer1 = SensorAgrv20.readPluviometerCurrent();
  pluviometer2 = SensorAgrv20.readPluviometerHour();
  pluviometer3 = SensorAgrv20.readPluviometerDay();
  // Read the vane sensor 
  vane = SensorAgrv20.readValue(SENS_AGR_VANE);


  ///////////////////////////////////////////
  // 5. Turn off the sensors
  /////////////////////////////////////////// 

  // Power off the temperature sensor
  //SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_TEMPERATURE);
  // Power off the humidity sensor
  //SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_HUMIDITY);
  // Power off the pressure sensor
  SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_PRESSURE);
  // Power off the LDR sensor
     // SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_LDR);
  // Power off the leaf wetness sensor
    //SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_LEAF_WETNESS);
  // Power off Sensirion
  SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_SENSIRION);
  // Power off the ultraviolet sensor
  //SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_RADIATION);
  // Power off the dendrometer sensor
  //SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_DENDROMETER);
  // Power off the PT1000 sensor
      //SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_PT1000);
  // Power off the watermark sensor
  //SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_WATERMARK_1);
  // Power off the weather station sensor
  SensorAgrv20.setSensorMode(SENS_OFF, SENS_AGR_ANEMOMETER);

  ///////////////////////////////////////////
  // 1. Create ASCII frame
  ///////////////////////////////////////////  

  USB.println(F("Create a new Frame:"));
  
  // create new frame
    frame.createFrame(MAX_FRAME);  
USB.println(frame.getFrameSize(),DEC); 


  // add frame fields
  //frame.addSensor(SENSOR_DATE, RTC.date, RTC.month, RTC.year);
  frame.addSensor(SENSOR_TIME, RTC.hour, RTC.minute, RTC.second);
  //frame.addSensor(SENSOR_ACC, ACC.getX(), ACC.getY(), ACC.getZ());
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel()); 
  
  // Add temperature
        //frame.addSensor(SENSOR_TCA, temperature);
  // Add humidity
        //frame.addSensor(SENSOR_HUMA, humidity);
  // Add pressure
  frame.addSensor(SENSOR_PA, pressure);
  // Add luminosity
  // frame.addSensor(SENSOR_LUM, ldr);
  // Add wetness
  //frame.addSensor(SENSOR_LW, wetness);
  // Add digital temperature
  /////////////////////////////////////////////////////
  // There is a probelm when you activate this frame //
  /////////////////////////////////////////////////////
  // frame.addSensor(SENSOR_TCB, digitalTemperature);
  /////////////////////////////////////////////////////
  
  
  // Add digital humidity
  frame.addSensor(SENSOR_HUMB, digitalHumidity);
  // Add radiation
       //frame.addSensor(SENSOR_UV, radiation);
  // Add dendrometer
  //frame.addSensor(SENSOR_TD, dendrometer);
  // Add PT1000
  //frame.addSensor(SENSOR_SOILT, pt1000Temperature);
  // Add watermark
  //frame.addSensor(SENSOR_HUMB, watermark);
  // Add pluviometer value
  frame.addSensor( SENSOR_PLV1, pluviometer1 );
  // Add pluviometer value
  frame.addSensor( SENSOR_PLV2, pluviometer2 );
  // Add pluviometer value
  frame.addSensor( SENSOR_PLV3, pluviometer3 );
  // Add anemometer value
  frame.addSensor( SENSOR_ANE, anemometer );
  // Add pluviometer value
  frame.addSensor( SENSOR_WV, vane );
  
  // Prints frame
  frame.showFrame();


  ///////////////////////////////////////////
  // 2. Send packet
  ///////////////////////////////////////////  

  // Sending packet before ending a timeout
  e = sx1272.sendPacketTimeoutACK( meshlium_address, frame.buffer, frame.length );
  
  // if ACK was received check signal strength
  if( e == 0 )
  {   
    USB.println(F("Packet sent OK"));     
    
    e = sx1272.getSNR();
    USB.print(F("-> SNR: "));
    USB.println(sx1272._SNR); 
    
    e = sx1272.getRSSI();
    USB.print(F("-> RSSI: "));
    USB.println(sx1272._RSSI);   
    
    e = sx1272.getRSSIpacket();
    USB.print(F("-> Last packet RSSI value is: "));    
    USB.println(sx1272._RSSIpacket); 
  }
  else 
  {
    USB.println(F("Error sending the packet"));  
    USB.print(F("state: "));
    USB.println(e, DEC);
  } 

  USB.println();
  delay(55000);
}
