/*  
 *  Code Default for sleep cordinator v4
 *  Parameter Cordinator: SM =7, SO = 1
 * Tom and Alex
 * 
 */

#include <WaspXBeeDM.h>
#include <WaspFrame.h>

// PAN (Personal Area Network) Identifier
uint8_t  panID[2] = {0x12,0x34}; 


// Define Freq Channel to be set: 
// Digimesh 2.4Ghz. Range from 0x0B to 0x1A
// Digimesh 900Mhz. Range from 0x00 to 0x0B
uint8_t  channel = 0x0B;


/* 
0x00 – Channel 0 -- 902 – 904,16 GHz
0x01 – Channel 1 --  904,16 – 906,32 GHz
0x02 – Channel 2 -- 906,32 – 908,48 GHz
0x03 – Channel 3 -- 908,48 – 910,64 GHz
0x04 – Channel 4 -- 910,64 – 912,80 GHz
0x05 – Channel 5 -- 912,80 – 914,96 GHz
0x06 – Channel 6 -- 914,96 – 917,12 GHz
0x07 – Channel 7 -- 917,12 – 919,28 GHz
0x08 – Channel 8 -- 919,28 – 921,44 GHz
0x09 – Channel 9 -- 921,44 – 923,6 GHz
0x0A – Channel 10 -- 923,6 – 925,76 GHz
0x0B – Channel 11 -- 925,76 – 928 GHz
*/



// Define BROADCAST MAC address
//////////////////////////////////////////
char RX_ADDRESS[] = "000000000000FFFF";

// Define Unicast
//////////////////////////////////////////
//char RX_ADDRESS[] = "0013A20040A5A041";
//////////////////////////////////////////

// Define the Waspmote ID
char WASPMOTE_ID[] = "Tom-Sleep";

// define variable
uint8_t error;

// deifne variable to get running time
unsigned long startTime;

void setup()
{
  //////////////////////////
  // 1. XBee setup
  //////////////////////////
  
  //1.1 Init USB port
  USB.ON();
  USB.println(F("Cyclic sleep example"));

  // 1.2 init RTC 
  RTC.ON();

  // 1.3 init XBee
  xbeeDM.ON();
  
  // 1.4 set sleep mode for cyclic sleep mode
  xbeeDM.setSleepMode(8);  
    
  // 1.5 Mesh Network Retries (4.7 manual digimesh)
  xbeeDM.setMeshNetworkRetries(0x07);  
  xbeeDM.getMeshNetworkRetries();  
  
  // 1.6 Set Power Lever 
    /*
    Parameter 	XBee-PRO
    0 	         10dBm
    1 	         12dBm
    2 	         14dBm
    3 	         16dBm 
    4 	         18dBm
    */
  xbeeDM.setPowerLevel(4);
  xbeeDM.getPowerLevel();


  // 1.7 store Waspmote identifier in EEPROM memory
  frame.setID( WASPMOTE_ID );
  delay(1000);
  
  
   /////////////////////////////////////
  // 2. set PANID
  /////////////////////////////////////
  xbeeDM.setPAN( panID );
  xbeeDM.getPAN();
  delay(1000);
  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("2. PAN ID set OK to: 0x"));
    USB.printHex( xbeeDM.PAN_ID[0] ); 
    USB.printHex( xbeeDM.PAN_ID[1] ); 
    USB.println();
  }
  else 
  {
    USB.println(F("2. Error calling 'setPAN()'"));  
  }


  /////////////////////////////////////
  // 1. set channel 
  /////////////////////////////////////
  xbeeDM.setChannel( channel );
  xbeeDM.getChannel();
  delay(1000);
  // check at commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("1. Channel set OK to: 0x"));
    USB.printHex( xbeeDM.channel );
    USB.println();
  
  }
  else 
  {
    USB.println(F("1. Error calling 'setChannel()'"));
    
    USB.print(F("Set Retries: "));
    USB.printHex(xbeeDM.meshNetRetries);
    USB.println();
   }
   
   
  
}
// -----------------------------------------------------------Production Loop ---------------------------------------------------------------

void loop()
{ 
  // 1.8 init XBee
  xbeeDM.ON(); 

 // --------------------- Config Xbee -------------------------------------
   
  /////////////////////////////////////
  // 1. get channel 
  /////////////////////////////////////
  xbeeDM.getChannel();
  USB.print(F("channel: "));
  USB.printHex(xbeeDM.channel);
  USB.println();

  /////////////////////////////////////
  // 2. get PAN ID
  /////////////////////////////////////
  xbeeDM.getPAN();
  USB.print(F("panid: "));
  USB.printHex(xbeeDM.PAN_ID[0]); 
  USB.printHex(xbeeDM.PAN_ID[1]); 
  USB.println(); 
  
  
 //----------------------------- Enter Sleep Settings ------------------------------------------------
 
  ///////////////////////////////////////////////
  // 2. Waspmote sleeps while XBee listens
  ///////////////////////////////////////////////

  // Waspmote enters to sleep until XBee module wakes it up
  // It is important not to switch off the XBee module when
  // entering sleep mode calling PWR.sleep function
  // It is necessary to enable the XBee interrupt

  // get starting time
  startTime = RTC.getEpochTime();

  USB.println(F("Enter deep sleep..."));
  
  // 2.1. enables XBEE Interrupt
  enableInterrupts(XBEE_INT);

  USB.println(F("..."));

 /////////////// 2.2. Waspmote enters sleep mode Radio is alive ////////////////////
//  #define ALL_OFF_ALEX SENS_OFF | UART0_OFF | UART1_OFF | BAT_OFF | RTC_OFF

  PWR.sleep( SENS_OFF | BAT_OFF | RTC_OFF );

  USB.println(F("after PwrSleep..."));
  
  ///////////////////////////////////////////////
  // 3. Waspmote wakes up and check intFlag
  ///////////////////////////////////////////////
  USB.ON();

  USB.println(F("...wake up!"));

  // init RTC 
  RTC.ON();
  
  USB.print(F("Sleeping time (seconds):"));
  USB.println( RTC.getEpochTime() - startTime );
   
  // After waking up check the XBee interrupt
  if( intFlag & XBEE_INT )
  {
    // blink the red LED
    Utils.blinkRedLED();

    USB.println(F("--------------------"));
    USB.println(F("XBee interruption captured!!"));
    USB.println(F("--------------------"));
    
    intFlag &= ~(XBEE_INT); // Clear flag
  }

  /* Application transmissions should be done here when XBee
   module is awake for the defined awake time. All operations
   must be done during this period before teh XBee modules enters
   a sleep period again*/

  // do nothing while XBee module remains awake before 
  // return to sleep agains after 'awake' seconds
  
  
  
  // ------------------------------ Create Data --------------------------------------------------------------
  
  ///////////////////////////////////////////
  // 3. Create ASCII frame
  ///////////////////////////////////////////  

  // create new frame
  frame.createFrame(ASCII);  
  
  // add frame fields
  frame.addSensor(SENSOR_STR, "new_sensor_frame");
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel()); 
  

  ///////////////////////////////////////////
  // 4. Send packet
  ///////////////////////////////////////////  

  // send XBee packet
  error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );   
  
  // check TX flag
  if( error == 0 )
  {
    USB.println(F("send ok"));
    
    // blink green LED
    Utils.blinkGreenLED();
    
  }
  else 
  {
    USB.println(F("send error"));
    
    // blink red LED
    Utils.blinkRedLED();
  }

  // wait for one second
  delay(1000);
}
