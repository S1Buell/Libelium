/* 
Produzido por: Alex Fracaroli.
               Tom Massicotte.

Data 11/04/2017

Código para leitura de sinal 4-20mA.
Device utilizado para coleta de informações do HydroRanger 200.
Cabos sensor (Vermelho: positivo; Preto: negativo)

Protocolo: X900
Mac Meshlium: "0013A20040A5A06D"
nodeID: Nivel_eflu01

*/

// Include this library for using current loop functions
#include <currentLoop.h>
#include <WaspFrame.h>
#include <WaspXBee900HP.h>
#include <WaspXBeeDM.h>

//Nome do Sensor (alterar quando para o nome desejado)
char node_ID[] = "Nivel_eflu01";

// PAN (Personal Area Network) Identifier (Necessário ser o mesmo da gateway)
uint8_t panID[2] = {0x7f,0xff}; 

/*************** Gateway Address **********************
Necessário trocar quando for instalada em novos locais.
Esse dado é verificado nas especificações da gateway.
*******************************************************/
//char RX_ADDRESS[] = "0013A20040A5A06D"; //ECC
//char RX_ADDRESS[] = "000000000000FFFF";
//char RX_ADDRESS[] = "0013A20040A5A041";
//char RX_ADDRESS[] = "0013A200416463FB";
char RX_ADDRESS[] = "0013A20041048771";


// define variable
uint8_t error;

char probe4_20[10];

char encryptionKey[] = "M6j3b456IIOTKey!";

// Define Preamble ID: from 0x00 to 0x07
uint8_t preambleID = 0x00;

// Area #4.0 Set Channel
//  Bitfield per region:
//    US/Canada  0xFFFFFFFFFFFFFFFF (Channels 0-63)
//    Australia  0xFFFFFFFE00000000 (Channels 33-63)
//    Brazil     0xFFFFFFFE00000FFF (Channels 0-11,33-63)
//////////////////////////////////////////////////////////////////
uint8_t channelMask[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF};

void setup()
{
  // Power on the USB for viewing data in the serial monitor
  USB.ON();
  USB.println(F("Coleta de dados sensor HydroRanger 200 \n"));
  USB.println(F("----------------------------------------"));
  USB.println(F("Setting configuration:")); 
  USB.println(F("----------------------------------------"));
  
  // Sets the 5V switch ON
  currentLoopBoard.ON(SUPPLY5V);
  delay(1000);

  // Sets the 12V switch ON
  currentLoopBoard.ON(SUPPLY12V); 
  delay(1000); 
  
  // init XBee 
  xbeeDM.ON(); 
  
  // Set the Waspmote ID
  frame.setID(node_ID); 
  
  /////////////////////////////////////
  // 2. set PANID
  /////////////////////////////////////
  xbeeDM.setPAN( panID );

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("1. PAN ID set OK to: 0x"));
    USB.printHex( xbeeDM.PAN_ID[0] ); 
    USB.printHex( xbeeDM.PAN_ID[1] ); 
    USB.println();
  }
  else 
  {
    USB.println(F("1. Error calling 'setPAN()'"));  
  }


  //Area #7 Set Network Retries for Mesh Network
  xbeeDM.setMeshNetworkRetries(0x07);
  xbeeDM.getMeshNetworkRetries();


  xbeeDM.setEncryptionMode(1);
  xbeeDM.setLinkKey( encryptionKey );
    //Area #8 Set Radio Power Output
  /*
    Parameter   XBee-PRO
    0            10dBm
    1            12dBm
    2            14dBm
    3            16dBm
    4            18dBm
  */

  xbeeDM.setPowerLevel(4);
  xbeeDM.getPowerLevel();
 
  xbeeDM.setChannelMask(channelMask);
  
  xbee900HP.setPreambleID(preambleID);
 
  /////////////////////////////////////
  // 3. write values to XBee module memory
  /////////////////////////////////////
  xbeeDM.writeValues();

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("2. Changes stored OK"));
  }
  else 
  {
    USB.println(F("2. Error calling 'writeValues()'"));   
  }

  USB.println(F("----------------------------------------"));
  USB.println(F("Sending:")); 
  USB.println(F("----------------------------------------"));
    
  delay(1000);
}


void loop()
{
  RTC.ON();
  
   // Sets the 5V switch ON
  currentLoopBoard.ON(SUPPLY5V);
  delay(1000);

  // Sets the 12V switch ON
  currentLoopBoard.ON(SUPPLY12V); 
  delay(1000); 
  
  // init XBee 
  xbeeDM.ON(); 
  
  /////////////////////////////////////
  // 1. get PANID
  /////////////////////////////////////
  xbeeDM.getPAN();
  USB.print(F("panid: "));
  USB.printHex(xbeeDM.PAN_ID[0]); 
  USB.printHex(xbeeDM.PAN_ID[1]); 
  USB.println(); 
  
  /////////////////////////////////////////////
  // 2. Read the current values 
  /////////////////////////////////////////////
  
  // Get the sensor value as a current in mA from SOCKET_A
  float current_socketA = currentLoopBoard.readCurrent(CHANNEL1); // Plug&Sense: SOCKET_A; OEM: CHANNEL1
  // Battery level %
  uint8_t battery_level = PWR.getBatteryVolts();

  USB.print("Current value read from channel 1: ");
  USB.print(current_socketA);
  USB.println("mA \n");
 
    // Convert Type Float to String
  Utils.float2String (current_socketA, probe4_20, 3);
  delay(500);
 
  /////////////////////////////////////////////
  // 3. Create ASCII frame
  /////////////////////////////////////////////

  // Create new frame (ASCII)
  frame.createFrame(ASCII);
  //Sensor 4-20mA Resultado no formato de string 
  frame.addSensor(SENSOR_STR, probe4_20);
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());
  frame.showFrame();
  
///////////////////////////////////////////
// 4. Send packet
///////////////////////////////////////////     
    
  // send XBee packet
  error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );   
  
  // check TX flag
  if( error == 0 )
  {
    USB.println(F("send ok"));
    // blink green LED
    Utils.blinkGreenLED();
  }
  else 
  {
    USB.println(F("send error"));
    // blink red LED
    Utils.blinkRedLED();
  }
  
 //   USB.println("\n error = %d \n", error);
  delay(1000);

  USB.println();

  /////////////////////////////////////////
  // Low power mode
  /////////////////////////////////////////

  USB.println(F("Going to Sleep"));  
  PWR.deepSleep("00:00:02:55", RTC_OFFSET, RTC_ALM1_MODE1, ALL_OFF);
 // PWR.deepSleep("00:00:00:10", RTC_OFFSET, RTC_ALM1_MODE1, ALL_OFF);

delay(240000);
  
  USB.ON();
  USB.println(F("\nwake up"));

  // After wake up check interruption source
  if( intFlag & RTC_INT )
  {
    // clear interruption flag
    intFlag &= ~(RTC_INT);
    USB.println(F("---------------------"));
    USB.println(F("RTC INT captured"));
    USB.println(F("---------------------"));
  }

}
