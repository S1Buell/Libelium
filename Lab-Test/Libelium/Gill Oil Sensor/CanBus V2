            //pre prod test Jan 17 2018
            /*  
             *  ------ Waspmote Pro Code Example -------- 
             *  
             *  Explanation: This is the basic Code for Waspmote Pro with Digi Mesh
             *
             *
             Change Log
             //Generall config
              1.0 Set Pan ID if needed 
              1.1 Set chennel of the Radio
              1.2 Set Gateway address or use BROADCAST mode. If you set the address the sensor will only send data to that spacific gateway
              1.3 Set snesor ID must be unique 
              1.4 Turn on Encryption or not
              1.5 Set Encryption Key
              1.6 Set Power Lever 
              
             */

     
            // Put your libraries here (#include ...)

//===============================================================
//              Set Variables  
//===============================================================

      #include <WaspXBeeDM.h>
      #include <WaspFrame.h>
      #include <WaspCAN.h>

//1. 
      // PAN (Personal Area Network) Identifier
      uint8_t  panID[2] = {0x12,0x34}; 

//1.1
      // Define Freq Channel to be set: 
      // Digimesh 2.4Ghz. Range from 0x0B to 0x1A
      // Digimesh 900Mhz. Range from 0x00 to 0x0B
      uint8_t  channel = 0x01;

      /* 
      0x00 – Channel 0 -- 902 – 904,16 GHz
      0x01 – Channel 1 --  904,16 – 906,32 GHz
      0x02 – Channel 2 -- 906,32 – 908,48 GHz
      0x03 – Channel 3 -- 908,48 – 910,64 GHz
      0x04 – Channel 4 -- 910,64 – 912,80 GHz
      0x05 – Channel 5 -- 912,80 – 914,96 GHz
      0x06 – Channel 6 -- 914,96 – 917,12 GHz
      0x07 – Channel 7 -- 917,12 – 919,28 GHz
      0x08 – Channel 8 -- 919,28 – 921,44 GHz
      0x09 – Channel 9 -- 921,44 – 923,6 GHz
      0x0A – Channel 10 -- 923,6 – 925,76 GHz
      0x0B – Channel 11 -- 925,76 – 928 GHz
      */


//1.2

      //Destination MAC address
      char RX_ADDRESS[] = "0013A200408DE1A8";

//OR

      //Define BROADCAST MAC address
      //char RX_ADDRESS[] = "000000000000FFFF";

//1.3
      //Define the Waspmote ID
      char WASPMOTE_ID[] = "Gill Oil #1";

      //Define variable
      uint8_t error;

//1.4
        //Define the Encryption mode: 1 (enabled) or 0 (disabled)
        uint8_t encryptionMode = 0;

//1.5 Set Encryption Key
      //Define the AES 16-byte Encryption Key
      char  encryptionKey[] = "WaspmoteValeKey!"; 
      
//===============================================================
//                    CanBus Area 
//===============================================================

      // CanBus PidID  
      #define myPID 0x0000 // <------- Define here your PID


float data;  // Stores the concentration level Of Course Particales 
float data1;  // Stores the concentration level Of Fine Particales 
float data2;  // Stores the Oil condition Vale
//float Data2;  // Stores the Temperature reading




//===============================================================
//%%%%%%%%% Setup Loop %%%%%%%%%%%%%%%%%%
//===============================================================

void setup()
{
  
      //Open USB port
      USB.ON();

      //===============================================================
      //            Canbus Area 
      //===============================================================
      // Print initial message 
      
      USB.println("Initializing CAN Bus..."); 
    
      // Configuring the BUS at 500 Kbit/s
      CAN.ON(250);   
      USB.println("CAN Bus initialized at 250 KBits/s");  
      USB.println();
     
      delay(100);
  
      //End ===========================================================


      //===============================================================
      //            X900 Config
      //===============================================================
      USB.println(F("-------------------------------"));
      USB.println(F("Configure XBee Digimesh"));
      USB.println(F("-------------------------------"));
      

          //Store Waspmote identifier in EEPROM memory
          frame.setID( WASPMOTE_ID );
          
          //Turn on XBee radio 
         xbeeDM.ON(SOCKET1);    
        
          
          //Set channel 
          xbeeDM.setChannel( channel );
        
          //Check at commmand execution flag
          if( xbeeDM.error_AT == 0 ) 
          {
            USB.print(F("1. Channel set OK to: 0x"));
            USB.printHex( xbeeDM.channel );
            USB.println();
          }
          else 
          {
            USB.println(F("1. Error calling 'setChannel()'"));
          }
        
        //Mesh Network Retries 
          xbeeDM.setMeshNetworkRetries(0x07);  
          xbeeDM.getMeshNetworkRetries();  
        
        //1.6 Set Power Lever 
        /*
        Parameter   XBee-PRO
        0            10dBm
        1            12dBm
        2            14dBm
        3            16dBm 
        4            18dBm
        */
        
        xbeeDM.setPowerLevel(4);
        xbeeDM.getPowerLevel();
        
        //Set PANID
          xbeeDM.setPAN( panID );
        
        //Check the AT commmand execution flag
          if( xbeeDM.error_AT == 0 ) 
          {
            USB.print(F("2. PAN ID set OK to: 0x"));
            USB.printHex( xbeeDM.PAN_ID[0] ); 
            USB.printHex( xbeeDM.PAN_ID[1] ); 
            USB.println();
          }
          else 
          {
            USB.println(F("2. Error calling 'setPAN()'"));  
          }
        
          //Set encryption mode (1:enable; 0:disable)
        
          xbeeDM.setEncryptionMode( encryptionMode );
        
          //Check the AT commmand execution flag
          if( xbeeDM.error_AT == 0 ) 
          {
            USB.print(F("3. AES encryption configured (1:enabled; 0:disabled):"));
            USB.println( xbeeDM.encryptMode, DEC );
          }
          else 
          {
            USB.println(F("3. Error calling 'setEncryptionMode()'"));
          }
        
         
          //Set encryption key
        
          xbeeDM.setLinkKey( encryptionKey );
        
          // check the AT commmand execution flag
          if( xbeeDM.error_AT == 0 ) 
          {
            USB.println(F("4. AES encryption key set OK"));
          }
          else 
          {
            USB.println(F("4. Error calling 'setLinkKey()'")); 
          }
        
          
         // Write values to XBee module memory
        
          xbeeDM.writeValues();
        
         // check the AT commmand execution flag
          if( xbeeDM.error_AT == 0 ) 
          {
            USB.println(F("5. Changes stored OK"));
          }
          else 
          {
            USB.println(F("5. Error calling 'writeValues()'"));   
          }
        
          USB.println(F("-------------------------------")); 
}

//End ===========================================================
  //                   END Setup LOOP 
//End ===========================================================


//===============================================================
//                      Run Loop 
//===============================================================

void loop()
{

      //===============================================================
      //                    Canbus Area 
      //===============================================================     
    
             
      //CAN.CiARequest(myPID);
      //=============================================================== 
      //            Print CAN Message 
      //=============================================================== 
                USB.println("PrintMessage Data Struct");    
                CAN.printMessage(&CAN.messageRx);
                USB.println("\n");
      
                // Is the a message available ?
               if (CAN.messageAvailable() == 1)
      //=============================================================== 
              
              {

      // read received message

       //==============================================================
       //            Read Dit 0 of the message and float the data 
       //==============================================================
       // Read and print the first Bit of the message 
          CAN.getMessage(&CAN.messageRx);
          USB.println("Reading Course Particales ");  
          data = uint16_t(CAN.messageRx.data[0]);
      
          
          USB.println("--------------------------");
          USB.print(F("Course Particales: "));
          USB.println(data);
          USB.print(F("Course Particals HEX: "));  
          USB.printHex(data);
          USB.println(F("\n--------------------------"));
         
        
          USB.println("\n");
     

       //==============================================================
       //            Read Dit 1 of the message and float the data 
       //==============================================================
    
          CAN.getMessage(&CAN.messageRx);
          USB.println("Reading Fine Particales ");  
          data1 = uint16_t(CAN.messageRx.data[1]);
      
          
          USB.println("--------------------------");
          USB.print(F("Fine Particals: "));
          USB.println(data1);
          USB.print(F("Fine Particals HEX: "));  
          USB.printHex(data1);
          USB.println(F("\n--------------------------"));
          USB.println("\n");

       //==============================================================
       //            Read Dit 2 of the message and float the data 
       //==============================================================
    
          CAN.getMessage(&CAN.messageRx);
          USB.println("Oil Condistion ");  
          data2 = uint16_t(CAN.messageRx.data[2]);
      
          
          USB.println("--------------------------");
          USB.print(F("Oil Condistion: "));
          USB.println(data2);
          USB.print(F("Oil Condistion HEX: "));  
          USB.printHex(data2);
          USB.println(F("\n--------------------------"));
          USB.println("\n");

       //==============================================================
       //            Read Dit 2 of the message and float the data
       //            Use this area if you enable Temperature  
       //==============================================================



      //==============================================================

         
        // is it from oil debris sensor? Teste para comparar o ID disponivel na Estrutura
      
        //    if ((CAN.messageRx.id & 0x67F) == 0x67F) // OK
        //    if ((CAN.messageRx.id & 0x19FF0064) == 0x19FF0064) //Não funciona. Id aparentemente diferente
        //    if ((CAN.messageRx.id) == 0x19FF0064)
      
            if ((CAN.messageRx.id) == 0x67F)
             {
                USB.println("Dentro do IF MessageRX"); 
        
                CAN.printMessage(&CAN.messageRx);
        
                delay(200);
                
                USB.print("ID (printHex): "); 
                USB.printHex(CAN.messageRx.id); 
                USB.println();
                
                USB.print("ID (printInt): "); 
                USB.println(CAN.messageRx.id); 
                USB.println();
         
             }
          }
        
          USB.print("\n---------------------------------------------------");
          USB.print("\n\n");
          delay(2000);
      // End ==============================================================

      //==============================================================
      //          Turn on X900 and send frame
      //==============================================================
        
        xbeeDM.ON(SOCKET1); 
        
       ////////////Set RTC Time /////////////////////////
       // Powers RTC up, init I2C bus and read initial values
        USB.println(F("Set RTC Time"));
        RTC.ON();
      
        /*
        // set RTC time
            error = xbeeDM.setRTCfromMeshlium(RX_ADDRESS);
                
            // check flag
            if( error == 0 )
            {
              USB.print(F("SET RTC ok. "));
            }
            else 
            {
              USB.print(F("SET RTC error. "));
            }  
            
            USB.print(F("RTC Time:"));
            USB.println(RTC.getTime());
            
            delay(2000);
      */
            
        // Get channel 
        xbeeDM.getChannel();
        USB.print(F("channel: "));
        USB.printHex(xbeeDM.channel);
        USB.println();
      
        USB.print(F("Set Retries: "));
        USB.printHex(xbeeDM.meshNetRetries);
        USB.println();
      
        // Get PAN ID
        xbeeDM.getPAN();
        USB.print(F("panid: "));
        USB.printHex(xbeeDM.PAN_ID[0]); 
        USB.printHex(xbeeDM.PAN_ID[1]); 
        USB.println(); 
        
        // 3. get Encryption mode (1:enable; 0:disable)
        xbeeDM.getEncryptionMode();
        USB.print(F("encryption mode: "));
        USB.printHex(xbeeDM.encryptMode);
        USB.println(); 
        
        USB.println(F("-------------------------------")); 
           
        delay(3000);

    

        
      //==============================================================
      //          Create Frame and send
      //==============================================================
  
      ///////////////////////////////////////////
      // Create ASCII frame
      ///////////////////////////////////////////  
      
        // create new frame
        frame.createFrame(ASCII);  
        
        // add frame fields
        //frame.addSensor(SENSOR_STR, "new_sensor_frame");
        
     //  
        frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel()); 
        frame.addSensor(SENSOR_SOIL_C, data);
        frame.addSensor(SENSOR_SOIL_F, data1);
        frame.addSensor(SENSOR_COND, data2);
      // Use this line if you enable the temp sensor and not the condition sensor
      //  frame.addSensor(SENSOR_OPC_TF, data2);
        
        USB.println(F("-------------------------------"));
        USB.println(F("Send Packet"));
        USB.println(F("-------------------------------"));
        
      
        // 2. Send packet
        // send XBee packet
        error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );   
        
        // check TX flag
        if( error == 0 )
        {
          USB.println(F("send ok"));
          
          // blink green LED    
          Utils.blinkGreenLED();
          
        }
        else 
        {
          USB.println(F("send error"));
          
          // blink red LED
          Utils.blinkRedLED();
        }

        USB.println(F("-------------------------------"));
        USB.println(F("10 Min Pause"));
        USB.println(F("-------------------------------"));
        // wait for five seconds
        delay(60000);
//END ==============================================================
}

 

