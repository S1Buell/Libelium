/*  
Codigo para Luciana.

O Sensor de audio (microfone) foi desabilitado pois só funciona com ASCII.
A gateway está recebendo somente dados do tipo MAX_FRAME.

The Audio Sensor (microphone) has been disabled since it only works with ASCII.

NODE 41

*/

#include <WaspSensorCities.h>
#include <WaspFrame.h>
// Include this library to transmit with sx1272
#include <WaspSX1272.h>

float temperature; 
float humidity; 
float analogLDRvoltage;
float audio;
 
char node_ID[] = "TST_STR_Analytic";

// define the Waspmote ID 
//////////////////////////////////////////
//char nodeID[] = "TST_STR_Analytic";
//////////////////////////////////////////

// Define the Meshlium address to send packets
// The default Meshlium address is '1'
uint8_t meshlium_address = 1;

// status variable
int e;


void setup() 
{
  USB.ON();
  USB.println(F("Frame Utility Example for Smart Cities"));

  // Switch ON RTC
  RTC.ON();

  // Switch ON ACC
  ACC.ON();

  // Init sx1272 module
  sx1272.ON();
  
  // Set the Waspmote ID
  frame.setID(node_ID); 
  
  //Power on board
  SensorCities.ON();
  
  // Select frequency channel
  e = sx1272.setChannel(CH_12_900);
  USB.print(F("Setting Channel CH_12_900.\t state ")); 
  USB.println(e);

  // Select implicit (off) or explicit (on) header mode
  e = sx1272.setHeaderON();
  USB.print(F("Setting Header ON.\t\t state "));  
  USB.println(e); 

  // Select mode (mode 1)
  e = sx1272.setMode(1);  
  USB.print(F("Setting Mode '1'.\t\t state "));
  USB.println(e);  

  // Select CRC on or off
  e = sx1272.setCRC_ON();
  USB.print(F("Setting CRC ON.\t\t\t state "));
  USB.println(e); 

  // Select output power (Max, High or Low)
  e = sx1272.setPower('H');
  USB.print(F("Setting Power to 'H'.\t\t state ")); 
  USB.println(e); 

  // Select the node address value: from 2 to 255
  e = sx1272.setNodeAddress(41);
  USB.print(F("Setting Node Address to '41'.\t state "));
  USB.println(e);
  
   //Select the maximum number of retries: from '0' to '5'
  e = sx1272.setRetries(5);
  
  USB.println();
}

void loop()
{
  
  // get Time from RTC
  RTC.getTime();
  ///////////////////////////////////////////
  // 1. Turn on the sensors
  /////////////////////////////////////////// 

  // Power on the temperature sensor
  SensorCities.setSensorMode(SENS_ON, SENS_CITIES_TEMPERATURE);
  // Power on the humidity sensor
  SensorCities.setSensorMode(SENS_ON, SENS_CITIES_HUMIDITY);
  // Power on the LDR sensor
  SensorCities.setSensorMode(SENS_ON, SENS_CITIES_LDR);
  // Power on the audio sensor
  //SensorCities.setSensorMode(SENS_ON, SENS_CITIES_AUDIO);
  delay(1000);


  ///////////////////////////////////////////
  // 2. Read sensors
  ///////////////////////////////////////////  

  // Read the temperature sensor
  temperature = SensorCities.readValue(SENS_CITIES_TEMPERATURE);
  // Read the humidity sensor
  humidity = SensorCities.readValue(SENS_CITIES_HUMIDITY);
  //First dummy reading for analog-to-digital converter channel selection
  SensorCities.readValue(SENS_CITIES_LDR);
  //Sensor LDR reading
  analogLDRvoltage = SensorCities.readValue(SENS_CITIES_LDR);
  // Read the audio sensor
 // audio = SensorCities.readValue(SENS_CITIES_AUDIO);
  
  ///////////////////////////////////////////
  // 3. Turn off the sensors
  /////////////////////////////////////////// 

  // Power off the temperature sensor
  SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_TEMPERATURE);
  // Power off the humidity sensor
  SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_HUMIDITY);
  // Power off the LDR sensor
  SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_LDR);
   // Power off the audio sensor
  //SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_AUDIO);
 
  ///////////////////////////////////////////
  // 4. Create ASCII frame
  /////////////////////////////////////////// 

  // Create new frame (ASCII)
  frame.createFrame(MAX_FRAME);

  // Add temperature
  frame.addSensor(SENSOR_TCA, temperature);
  // Add humidity
  frame.addSensor(SENSOR_HUMA, humidity);
  // Add LDR value
  frame.addSensor(SENSOR_LUM, analogLDRvoltage);
   // Add audio
//  frame.addSensor(SENSOR_MCP, audio);
  // Add DS18B20 temperature
// frame.addSensor(SENSOR_TCC, tempDS18B20);
  frame.addSensor(SENSOR_ACC, ACC.getX(), ACC.getY(), ACC.getZ());
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());

  // Show the frame
//  frame.showFrame();

 
  
  ///////////////////////////////////////////
  // 2. Send packet
  ///////////////////////////////////////////  

  // Sending packet before ending a timeout
  e = sx1272.sendPacketTimeoutACKRetries( meshlium_address, frame.buffer, frame.length );
  
  // if ACK was received check signal strength
  if( e == 0 )
  {   
    USB.println(F("Packet sent OK"));     
  }
  else 
  {
    USB.println(F("Error sending the packet"));  
    USB.print(F("state: "));
    USB.println(e, DEC);
  } 

  USB.println();
 // delay(2500);
  
}
