 // Tom
 //Version:           0.1
 // Change list
 // 


// Include these libraries to transmit frames with sx1272
#include <WaspSX1272.h>
#include <WaspFrame.h>

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//1.0
// Lora Gateway Address
// Define the destination address to send packets
uint8_t rx_address = 2;
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//2.0
// define the Waspmtoe ID
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
char nodeID[] = "node_001";
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//3.0
// define status variable
int e;


void setup()
{

//4.0 
 // Init USB port
  USB.ON();
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  USB.println(F("Test Tom"));
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  USB.println(F("Semtech SX1272 module. TX LoRa with Waspmote Frame, ACKs and Retries"));

  // set node ID
  frame.setID(nodeID);

  // Init Accelerometer
  ACC.ON();


  USB.println(F("----------------------------------------"));
  USB.println(F("Setting configuration:")); 
  USB.println(F("----------------------------------------"));

  // Init sx1272 module
  sx1272.ON();
//5.0
  // Select frequency channel
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  e = sx1272.setChannel(CH_12_900);
  USB.print(F("Setting Channel CH_12_900.\t state ")); 
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  USB.println(e);
//5.1
  // Select implicit (off) or explicit (on) header mode
  e = sx1272.setHeaderON();
  USB.print(F("Setting Header ON.\t\t state "));
  USB.println(e); 
//5.2
  // Select mode: from 1 to 10
  e = sx1272.setMode(1);  
  USB.print(F("Setting Mode '1'.\t\t state ")); 
  USB.println(e);  
//5.3
  // Select CRC on or off
  e = sx1272.setCRC_ON();
  USB.print(F("Setting CRC ON.\t\t\t state "));
  USB.println(e);  
//5.4
  // Select output power (Max, High or Low)
  e = sx1272.setPower('H');
  USB.print(F("Setting Power to 'H'.\t\t state ")); 
  USB.println(e); 
//5.5
  // Select the node address value: from 2 to 255
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  e = sx1272.setNodeAddress(13);
  USB.print(F("Setting Node Address to '13'.\t state "));
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  USB.println(e);
//5.6
  // Select the maximum number of retries: from '0' to '5'
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  e = sx1272.setRetries(3);
  USB.print(F("Setting Max retries to '3'.\t state "));
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  USB.println(e);
  USB.println();

  delay(1000);  

  USB.println(F("----------------------------------------"));
  USB.println(F("Sending:")); 
  USB.println(F("----------------------------------------"));
}


void loop()
{  
  //6.0
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  ///////////////////////////////////////////
  // 1. Create Max frame
  ///////////////////////////////////////////  
  
  frame.createFrame(MAX_FRAME);  
  USB.println(frame.getFrameSize(),DEC); 

// or

 //6.1
  ///////////////////////////////////////////
  // 1. Create ASCII frame
  ///////////////////////////////////////////  

  // Creating frame to send
  //frame.createFrame(ASCII);
  USB.println(F("Frame created"));
 //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  // Adding sensor battery
  frame.addSensor(SENSOR_BAT, (uint8_t) PWR.getBatteryLevel());
  USB.println(F("Battery level added"));

  // Adding accelerometer
  frame.addSensor(SENSOR_ACC, ACC.getX(), ACC.getY(), ACC.getZ() );
  USB.println(F("Accelerometer added"));

  // Printing frame
  frame.showFrame(); 
  
  

  ///////////////////////////////////////////
  // 7. Send packet
  ///////////////////////////////////////////  
  
  // 7.1. Sending packet, with retries if failure, and waiting an ACK response
  e = sx1272.sendPacketTimeoutACKRetries( rx_address, frame.buffer, frame.length);
  
  
  // 7.2.2. Check sending status
  if( e == 0 ) 
  {
    USB.println(F("--> Packet sent OK"));     
  }
  else 
  {
    USB.println(F("--> Error sending the packet"));  
    USB.print(F("state: "));
    USB.println(e, DEC);
  } 

  USB.println();
  delay(5000);
}
