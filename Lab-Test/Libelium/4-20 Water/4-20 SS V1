//   ------ [4-20mA_v1] Q-Blast 48-88 Suspended Solid System TEST -------- 
/* 
 * Data 15 10 18
 * Code for 1.5v waspmote
 * 
 * By  Alex Fracaroli.
 * Tom Massicotte.
 * Ludmilla Bassini
 * Read 4-20mA signal 
*/

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  Area #1 Set Global Variables  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


// ===========================================================================
// Include this library for using current loop functions
#include <currentLoop.h>
#include <WaspFrame.h>
#include <WaspXBeeDM.h>
#include <WaspXBee900HP.h>
// ===========================================================================

//Nome do Sensor (alterar quando para o nome desejado)
char WASPMOTE_ID[] = "Solid_Sensor";

// define variable
uint8_t error;
char solidmgl[3];
float tempc[3];

// PAN (Personal Area Network) Identifier (Necessário ser o mesmo da gateway)
uint8_t  panID[2] = {0x7F, 0xFF}; 

// ===========================================================================
// ************** Gateway Address ********************
   //char RX_ADDRESS[] = "0013A2004104876A"; // CPD MAC ID
    char RX_ADDRESS[] = "0013A200418473D8"; // Lab
// ===========================================================================

uint8_t channelMask[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF};

// Set Encryption On/Off
// Define the Encryption mode: 1 (enabled) or 0 (disabled)
  uint8_t encryptionMode = 1;
  char encryptionKey[] = "M6j3b456IIOTKey!";

// Define Preamble ID: from 0x00 to 0x07
   uint8_t preambleID = 0x00;

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Area #2 Config Xbee   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

void setup()
{
  // Power on the USB for viewing data in the serial monitor
  USB.ON();
  USB.println(F("      Suspended Solid System \n"));
  USB.println(F("*********************************"));
 
  // Sets the 5V switch ON
  currentLoopBoard.ON(SUPPLY5V);
  delay(1000);

  // Sets the 12V switch ON
  currentLoopBoard.ON(SUPPLY12V); 
  delay(1000); 
  
  // init XBee DigiMesh -> SOCKET_1 because i´m using the shield
  xbeeDM.ON(SOCKET_1); 
 
  // Print Gatway MAC 
  USB.print(F("  Gateway MAC is:"));
  USB.println(RX_ADDRESS);
  USB.println(); 
  
  // Set the Waspmote ID
  frame.setID(WASPMOTE_ID); 
  
//  xbeeDM.setPreambleID(preambleID);
 
// ===========================================================================
// Write values to XBee module memory
    xbeeDM.writeValues();
// ============================================================================

  delay(1000);
 }
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Prod Loop %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

void loop()
{
  // init XBee 
  xbeeDM.ON(SOCKET_1); 

// ===========================================================================
// Read the current values - SOLID SENSOR
 
 float current_solid = currentLoopBoard.readCurrent(CHANNEL1); // Value as a current in mA - reading from Channel 1 
  current_solid=current_solid+0.06; //correcting the error
  USB.print("  Solid Sensor Current Read value: ");
  USB.printFloat(current_solid, 3); //print current value with 3 decimals
  USB.println(" mA \n");
  USB.print("  Solid Sensor Converted Value in mg/l: ");
  USB.printFloat((((current_solid)*250)-1001), 3); //converting mA to mg/l and printing the value with 3 decimals 
  USB.println(" mg/l \n");

// Convert Type Float to String -> Convert current_solid float to string to add on sensor frame
  Utils.float2String ((((current_solid+0.06)*250)-1001), solidmgl, 3);
  delay(500);
   
// ===========================================================================
// Read the current values - TEMP SENSOR
  
  float current_temp = currentLoopBoard.readCurrent(CHANNEL2); // Value as a current in mA - reading from Channel 2 
  current_temp=current_temp+0.05; // correntig the error
  USB.print("  Temperature Sensor current Read Value:  ");
  USB.printFloat(current_temp, 3); //print current value with 3 decimal
  USB.println(" mA \n");
  USB.print("  Temperature Sensor converted Value: ");
  float tempc=((((current_temp)*3.125)-12.5)); //converting mA to celsius
  USB.printFloat(tempc);// printing the value with 3 decimals 
  USB.println(" C \n");
  
  delay(500);
 
 // ===========================================================================
 // Show battery level
  uint8_t battery_level = PWR.getBatteryVolts();
  USB.print(F("  Battery Level: "));
  USB.print(PWR.getBatteryLevel(), DEC);
  USB.println(F(" % \n"));
 // ===========================================================================

// ===========================================================================
// Create new frame (ASCII)
  frame.createFrame(ASCII); 
 //frame.addSensor(SENSOR_DUST, solidmgl); //create frame with the solid sensor information -->>>testing the sensor_dust type
  frame.addSensor(SENSOR_STR, solidmgl);
  frame.addSensor(SENSOR_TCB, tempc, 3);
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel()); // set frame fields (Battery sensor - uint8_t)
  frame.showFrame(); //print the frame
// ==========================================================================

// ==========================================================================
// Send Xbee packet  
  error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );   
  
  // check TX flag
  if( error == 0 )
  {
    USB.println(F("send ok"));
    // blink green LED
    Utils.blinkGreenLED();
  }
  else 
  {
    USB.println(F("send error"));
    // blink red LED
    Utils.blinkRedLED();
  }
  //   USB.println("\n error = %d \n", error);
  delay(1000);
  USB.println();
  
// ==========================================================================  
//Setting Sleep Mode    
  USB.println(F("enter sleep"));
  // Go to sleep disconnecting all the switches and modules
  // After 8 seconds, Waspmote wakes up thanks to internal watchdog
  PWR.sleep(WTD_8S, ALL_OFF);
  
  USB.ON(); // turn back on
  USB.println(F("\nwake up"));
  
  delay(1000);
 
}
