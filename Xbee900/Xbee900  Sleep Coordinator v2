///////////////////////////////////////////////
/////Config Xbee900  Sleep Coordinator V2  ///////
//////////////////////////////////////////////
/*
*  You should have received a copy of the GNU General Public License 
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>. 
 *  
 *  Version:           0.2
 *  Design:            David Gascón 
 *  Implementation:    Yuri Carmona
*/




#include <WaspXBeeDM.h>
#include <WaspFrame.h>

 
// PAN (Personal Area Network) Identifier
uint8_t  panID[2] = {0x7F,0xFF}; 



// Define Freq Channel to be set: 
// Digimesh 2.4Ghz. Range from 0x0B to 0x1A
// Digimesh 900Mhz. Range from 0x00 to 0x0B
uint8_t  channel = 0x0F;


/* 
0x00 – Channel 0 -- 902 – 904,16 GHz
0x01 – Channel 1 --  904,16 – 906,32 GHz
0x02 – Channel 2 -- 906,32 – 908,48 GHz
0x03 – Channel 3 -- 908,48 – 910,64 GHz
0x04 – Channel 4 -- 910,64 – 912,80 GHz
0x05 – Channel 5 -- 912,80 – 914,96 GHz
0x06 – Channel 6 -- 914,96 – 917,12 GHz
0x07 – Channel 7 -- 917,12 – 919,28 GHz
0x08 – Channel 8 -- 919,28 – 921,44 GHz
0x09 – Channel 9 -- 921,44 – 923,6 GHz
0x0A – Channel 10 -- 923,6 – 925,76 GHz
0x0B – Channel 11 -- 925,76 – 928 GHz
*/

// Destination MAC address
//////////////////////////////////////////
//char RX_ADDRESS[] = "0013A200408DE1AF";
//////////////////////////////////////////

//OR

// Define BROADCAST MAC address
//////////////////////////////////////////
char RX_ADDRESS[] = "000000000000FFFF";
//////////////////////////////////////////

// Define the Waspmote ID
char WASPMOTE_ID[] = "node_1_X900_Test_Far";


// define variable
uint8_t error;


// Define the Encryption mode: 1 (enabled) or 0 (disabled)
uint8_t encryptionMode = 0;

// Define the AES 16-byte Encryption Key
char  encryptionKey[] = "WaspmoteValeKey!"; 
 
//////////////////Set Sleeptime ////////////////////////
 // SP parameter: Time to be asleep -> 5 seconds: 0x0001F4 (hex format, time in units of 10ms)
// Other possible values: 
//   0x0003E8 (10 seconds)
//   0x0000C8 (2 seconds)
//   0x0005DC (15 seconds)
//   0x001770 (60 seconds)
//   0x007530 (5 Min 3000ms)
uint8_t asleep[3]={ 0x00,0x75,0x30};

///////////////Set Wake time /////////////////////////////
// ST parameter: Time to be awake -> 5 seconds: 0x001388 (hex format, time in units of 1ms)
// Other possible values: 
//   0x002710 (10 seconds)
//   0x0007D0 (2 seconds)
//   0x003A98 (15 seconds)
//   0x00EA60 (60 seconds)
//   0x0493E0
uint8_t awake[3]={ 0x04,0x93,0xE0};

// deifne variable to get running time
unsigned long startTime;
 
//////////////////// End Sleep/Wake Config 
 
void setup()
{
  
// open USB port
  USB.ON();

  USB.println(F("-------------------------------"));
  USB.println(F("Configure XBee Digimesh"));
  USB.println(F("-------------------------------"));
  
// store Waspmote identifier in EEPROM memory
  frame.setID( WASPMOTE_ID );
  
/////////////////////////////////////////
//////////////////////////
// 1. XBee setup
//////////////////////////
//////////////////////////////////////////  
  // init XBee 
 xbeeDM.ON();    
 
///////////////////////////////////////////////////////////////
/////////////// Preferred Sleep Coordinator ///////////////////
xbeeDM.setSleepMode(7); // Set Sync Cyclic Sleep Mode
xbeeDM.getSleepMode(); // Get the Sleep Mode use

xbeeDM.setSleepOptions(0x01); // Set the node to be the preferred sleep coordinator

// 1.2. set time the module remains awake (ST parameter)
  xbeeDM.setAwakeTime(awake);
  
  // check AT command flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("ST parameter set ok"));
  }
  else 
  {
    USB.println(F("error setting ST parameter")); 
  }

  // 1.3. set Sleep period (SP parameter)
  xbeeDM.setSleepTime(asleep);
  
  // check AT command flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("SP parameter set ok"));
  }
  else 
  {
    USB.println(F("error setting SP parameter")); 
  }

  // 1.4. set sleep mode for cyclic sleep mode
  xbeeDM.setSleepMode(8);  
  
///////////////////////////////////////////////////////////////
/////////End Sleep Config ///////////////////////
///////////////////////////////////////////////////////



/////////////////////////////////////
// 1. set channel 
/////////////////////////////////////
  xbeeDM.setChannel( channel );

// check at commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("1. Channel set OK to: 0x"));
    USB.printHex( xbeeDM.channel );
    USB.println();
  }
  else 
  {
    USB.println(F("1. Error calling 'setChannel()'"));
  }


/////////////////////////////////////
 // 2. set PANID
///////////////////////////////////////
 
  xbeeDM.setPAN( panID );

// check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("2. PAN ID set OK to: 0x"));
    USB.printHex( xbeeDM.PAN_ID[0] ); 
    USB.printHex( xbeeDM.PAN_ID[1] ); 
    USB.println();
  }
  else 
  {
    USB.println(F("2. Error calling 'setPAN()'"));  
  }



  /////////////////////////////////////
  // 3. set encryption mode (1:enable; 0:disable)
  /////////////////////////////////////
  xbeeDM.setEncryptionMode( encryptionMode );

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("3. AES encryption configured (1:enabled; 0:disabled):"));
    USB.println( xbeeDM.encryptMode, DEC );
  }
  else 
  {
    USB.println(F("3. Error calling 'setEncryptionMode()'"));
  }




  /////////////////////////////////////
  // 4. set encryption key
  /////////////////////////////////////
  xbeeDM.setLinkKey( encryptionKey );

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("4. AES encryption key set OK"));
  }
  else 
  {
    USB.println(F("4. Error calling 'setLinkKey()'")); 
  }




  /////////////////////////////////////
  // 5. write values to XBee module memory
  /////////////////////////////////////
  xbeeDM.writeValues();

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("5. Changes stored OK"));
  }
  else 
  {
    USB.println(F("5. Error calling 'writeValues()'"));   
  }

  USB.println(F("-------------------------------")); 
}

void loop()
{
    
  
  
  /////////////////////////////////////
  // 1. get channel 
  /////////////////////////////////////
  xbeeDM.getChannel();
  USB.print(F("channel: "));
  USB.printHex(xbeeDM.channel);
  USB.println();



  /////////////////////////////////////
  // 2. get PAN ID
  /////////////////////////////////////
  xbeeDM.getPAN();
  USB.print(F("panid: "));
  USB.printHex(xbeeDM.PAN_ID[0]); 
  USB.printHex(xbeeDM.PAN_ID[1]); 
  USB.println(); 
  
  /////////////////////////////////////
  // 3. get Encryption mode (1:enable; 0:disable)
  /////////////////////////////////////
  xbeeDM.getEncryptionMode();
  USB.print(F("encryption mode: "));
  USB.printHex(xbeeDM.encryptMode);
  USB.println(); 
  
  USB.println(F("-------------------------------")); 
     
  delay(3000);


/////////////////////////////////////////////
//////////// END Digi Mesh Config ////////////
////////////////////////////////////////////


///////////////////////////////////////////////
 // 2. Waspmote sleeps while XBee sleeps
///////////////////////////////////////////////

  // Waspmote enters to sleep until XBee module wakes it up
  // It is important not to switch off the XBee module when
  // entering sleep mode calling PWR.sleep function
  // It is necessary to enable the XBee interrupt

  // get starting time
  startTime = RTC.getEpochTime();

  USB.println(F("Enter deep sleep..."));
  
  // 2.1. enables XBEE Interrupt
  enableInterrupts(XBEE_INT);

  // 2.2. Waspmote enters sleep mode
  PWR.sleep( SENS_OFF );


  ///////////////////////////////////////////////
  // 3. Waspmote wakes up and check intFlag
  ///////////////////////////////////////////////

  USB.println(F("...wake up!"));

  // init RTC 
  RTC.ON();
  
  USB.print(F("Sleeping time (seconds):"));
  USB.println( RTC.getEpochTime() - startTime );
 
  
  // After waking up check the XBee interrupt
  if( intFlag & XBEE_INT )
  {
    // blink the red LED
    Utils.blinkRedLED();

    USB.println(F("--------------------"));
    USB.println(F("XBee interruption captured!!"));
    USB.println(F("--------------------"));
    
    intFlag &= ~(XBEE_INT); // Clear flag
  }

  /* Application transmissions should be done here when XBee
   module is awake for the defined awake time. All operations
   must be done during this period before teh XBee modules enters
   a sleep period again*/

  // do nothing while XBee module remains awake before 
  // return to sleep agains after 'awake' seconds

///////////////////////////////////////////
// 1. Create ASCII frame
///////////////////////////////////////////  

  // create new frame
  frame.createFrame(ASCII);  
  
  // add frame fields
  frame.addSensor(SENSOR_STR, "new_sensor_frame");
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel()); 
  

  USB.println(F("-------------------------------"));
  USB.println(F("Send Packet"));
  USB.println(F("-------------------------------"));
  
///////////////////////////////////////////
  // 2. Send packet
///////////////////////////////////////////  

  // send XBee packet
  error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );   
  
  // check TX flag
  if( error == 0 )
  {
    USB.println(F("send ok"));
    
    // blink green LED    
    Utils.blinkGreenLED();
    
  }
  else 
  {
    USB.println(F("send error"));
    
    // blink red LED
    Utils.blinkRedLED();
  }

  // wait for five seconds
  delay(5000);

}
