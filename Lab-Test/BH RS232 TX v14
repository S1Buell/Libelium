#include <WaspFrame.h>
#include <WaspXBeeDM.h>

// Destination MAC address
//////////////////////////////////////////
//char RX_ADDRESS[] =   "0013A20040A5A041";
char RX_ADDRESS[] =   "0013A200408DE1A8";

//char RX_ADDRESS[] = "000000000000FFFF";

//////////////////////////////////////////

// Define the Waspmote ID
char WASPMOTE_ID[] = "node_01";


// define variable
uint8_t error;


// define folder and file to store data
char path[]="/data";
char filename[]="/data/log";

// buffer to write into Sd File
char toWrite[220];

// define variables to read stored frames 
uint8_t frameSD[MAX_FRAME+1];
uint16_t lengthSD;
int32_t numLines;

int32_t  diskSize;

void pegaEnvia (char filename[]);

// variables to define the file lines to be read
int startLine;
int endLine;
int countFrames=0;
int countFramesWhlie=0;
int sendok=0;
int senderror=0;

// define variable
uint8_t sd_answer;

uint8_t  panID[2] = {0x12,0x34}; 


void setup()
{
  // init USB port
  USB.ON();
  
  // store Waspmote identifier in EEPROM memory
  frame.setID( WASPMOTE_ID );
  
  // init XBee
  xbeeDM.ON(SOCKET1);

  /////////////////////////////////////
  // 2. set PANID
  /////////////////////////////////////
  xbeeDM.setPAN( panID );

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("PAN ID set OK to: 0x"));
    USB.printHex( xbeeDM.PAN_ID[0] ); 
    USB.printHex( xbeeDM.PAN_ID[1] ); 
    USB.println();
  }
  else 
  {
    USB.println(F("2. Error calling 'setPAN()'"));  
  }
  
  // open USB port
  USB.ON();
  USB.println(F("SD_07 example"));

  // Set SD ON
  SD.ON();

    // Delete file
  sd_answer = SD.del(filename);
  
  if( sd_answer == 1 )
  {
    USB.println(F("file deleted"));
  }
  else 
  {
    USB.println(F("file NOT deleted"));  
  }

  // create path
  sd_answer = SD.mkdir(path);
  
  if( sd_answer == 1 )
  { 
    USB.println(F("path created"));
  }
  else
  {
    USB.println(F("mkdir failed"));
  }

  // Create file for Waspmote Frames
  sd_answer = SD.create(filename);
  
  if( sd_answer == 1 )
  { 
    USB.println(F("/data/log created"));
  }
  else
  {
    USB.println(F("/data/log not created"));
  }

  // init Accelerometer
  ACC.ON();

  // set RTC time
  error = xbeeDM.setRTCfromMeshlium(RX_ADDRESS);
      
  // check flag
  if( error == 0 )
  {
    USB.print(F("SET RTC ok. "));
  }
  else 
  {
    USB.print(F("SET RTC error. "));
  }  
  
  USB.print(F("RTC Time:"));
  USB.println(RTC.getTime());
  
  delay(1000);

}

void loop()
{    

    RTC.setAlarm1("00:00:53:00", RTC_ABSOLUTE, RTC_ALM1_MODE4);
        
    PWR.sleep(ALL_OFF);
    USB.ON();
    RTC.ON();
    delay(100);
    SD.ON();
    
    // INTERRUPÇÃO PARA SLEEP AND WAKE NA HORA DETERMINADA
    if( intFlag & RTC_INT )
    {
      intFlag &= ~(RTC_INT); // Clear flag
      USB.println("+++++++++++++++++++++++++++++Acorda na hora determinada+++++++++++++++++++++++++++ ");
      
      while (countFramesWhlie<=4)
      {

        /////////////////////////////////////////////////////
        // 1. Create Data frame using the Waspmote Frame class
        /////////////////////////////////////////////////////
      
         // Create new frame (ASCII)
        frame.createFrame(ASCII,"Waspmote_Pro"); 
     
        // add frame field (String message)
        frame.addSensor(SENSOR_STR, (char*) "data frame");
        // add frame field (Battery level)
        frame.addSensor(SENSOR_BAT, (uint8_t) PWR.getBatteryLevel());
        // add frame field (Accelerometer axis)
        frame.addSensor(SENSOR_ACC, ACC.getX(), ACC.getY(), ACC.getZ() );
        //show actual Frame 
        frame.showFrame(); 
        
        
        /////////////////////////////////////////
        // DATA LOGGER
        ////////////////////////////////////////
       
        // Inicializa o array toWrite com 0
        memset(toWrite, 0x00, sizeof(toWrite) ); 
        // Conversion from Binary to ASCII
        Utils.hex2str( frame.buffer, toWrite, frame.length);
        // Imprime o buffer armazenado em toWrite
        USB.print(F("Frame to be stored:"));
        USB.println(toWrite);
        
        /////////////////////////////////////////////////////   
        // 2. Append data into file
        /////////////////////////////////////////////////////  
        
        // grava o frame no arquivo
        sd_answer = SD.appendln(filename, toWrite);
          
        if( sd_answer == 1 )
        {
          USB.println(F("Frame appended to file"));
        }
        else 
        {
          USB.println(F("Append failed"));
        }

        //Sleep por 1 min
        countFramesWhlie++;

        USB.println("+++++++++++++++++++++++++++++Dormir por 1 min+++++++++++++++++++++++++++ ");
        
        RTC.setAlarm1("00:00:10:00", RTC_OFFSET, RTC_ALM1_MODE4);
            
        PWR.sleep(ALL_OFF);
        USB.ON();
        RTC.ON();
        delay(100);
        SD.ON();
        
        // INTERRUPÇÃO PARA SLEEP AND WAKE NA HORA DETERMINADA
        if( intFlag & RTC_INT )
        {
          intFlag &= ~(RTC_INT); // Clear flag
          USB.println("+++++++++++++++++++++++++++++Acorda depois de 1 min+++++++++++++++++++++++++++ ");
        }  
       
        
      } //end whlie

      
      /////////////////////////////////////////////////////
      // 3. Get information from File
      /////////////////////////////////////////////////////  
        
      // get number of lines in file
      numLines = SD.numln(filename);
           
      pegaEnvia(filename);
      countFrames=0;
    
       // set RTC time
      error = xbeeDM.setRTCfromMeshlium(RX_ADDRESS);
                
       // check flag
      if( error == 0 )
      {
        USB.print(F("SET RTC ok. "));
      }
      else 
      {
        USB.print(F("SET RTC error. "));
      }  
            
      USB.print(F("RTC Time:"));
      USB.println(RTC.getTime());
     
      USB.println();

      USB.println("Show File: ");
      SD.showFile(filename);
      delay(1000);

      countFramesWhlie=0; 
       
    }// end if (interrupcao)
    
   USB.println("Loop:");
   delay(200);
}

void pegaEnvia (char filename[])
{
    // get number of lines in file
    numLines = SD.numln(filename);
    startLine = numLines-1;
    endLine = numLines;
      
    USB.print("StartLine: ");
    USB.println(startLine);
        
    USB.print("Numero de Linhas: ");
    USB.println(numLines);
        
    // iterate to get the File lines specified
    // O valor 3 é o numero de linhas que o 
    for( int i=startLine-3; i<endLine ; i++ )
    {  
      // Get 'i' line -> SD.buffer
      SD.catln( filename, i,1); 
         
      // initialize frameSD
      memset(frameSD, 0x00, sizeof(frameSD) ); 
          
      // conversion from ASCII to Binary 
      lengthSD = Utils.str2hex(SD.buffer, frameSD );
      
      // Conversion from ASCII to Binary 
      USB.print(F("Get previously stored frame:"));
          
      for(int j=0; j<lengthSD; j++)
      {    
        USB.print(frameSD[j],BYTE);
      }
      USB.println();
          
      /************************************************
        * At this point 'frameSD' and 'lengthSD' can be 
        * used as 'frame.buffer' and 'frame.length' to 
        * send information via some communication module 
      *************************************************/

      xbeeDM.ON(SOCKET1);
      delay(100);
      xbeeDM.setPAN(panID);
      delay(100);
      
      // send XBee packet
      error = xbeeDM.send( RX_ADDRESS, frameSD, lengthSD );   
          
      // check TX flag
      if( error == 0 )
      {
        USB.println(F("send ok"));
      }
      else 
      {
        USB.println(F("send error"));
        // blink red LED
        Utils.blinkRedLED();
        senderror++;
      }
    
    }
}
