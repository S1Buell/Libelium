//Test DEC 6th
//Send every min DEC 6th
// Coded created by Alex and Tom Nov 13 2017
// Alex Calegari Fracaroli C0479831@vale.com
// Tom Massicotte Tom.massicotte@vale.com


//Pre Prod Test Code (Tom)
//Test DEC 6th

//Changes
// Area #1.0 Set Pan ID
// Area #2.0 Set MAC ID
// Area #3.0 Set Waspmote ID
// Area #4.0 Set Channel
// Area #7.0 Set Network Retries
// Area #8.0 Set Radio Power Output
// Area #9.0 Sync Time to Gateway
// Area #10.0 Sync Time to Gateway



//last code we made
#include <Wasp232.h>
#include <ModbusMaster232.h>
#include <WaspXBee900HP.h>
#include <WaspFrame.h>


//================================================================================
//                      Set Variables
//================================================================================

char sonda0[] = "PMAI-03";
char sonda1[] = "BF-04AS";



//Area #1 Set Pan ID
uint8_t  panID[2] = {0x7F, 0xFF};

//Area #2 Set MAC ID
// Define BROADCAST MAC address
//  char RX_ADDRESS[] = "000000000000FFFF";
//or
//char RX_ADDRESS[] = "0013A20040A5A041";
char RX_ADDRESS[] = "0013A200416463E2";

//Area #3 Set Waspmote ID
char WASPMOTE_ID[] = "PMAI-03";

// Area #4.0 Set Channel
//  Bitfield per region:
//    US/Canada  0xFFFFFFFFFFFFFFFF (Channels 0-63)
//    Australia  0xFFFFFFFE00000000 (Channels 33-63)
//    Brazil     0xFFFFFFFE00000FFF (Channels 0-11,33-63)
//////////////////////////////////////////////////////////////////
uint8_t channelMask[8] = {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF};
//uint8_t channelMask[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F};

// Define Preamble ID: from 0x00 to 0x07
uint8_t preambleID = 0x00;

// Area #5 Set Encryption On/Off
// Define the Encryption mode: 1 (enabled) or 0 (disabled)
uint8_t encryptionMode = 1;

// Area #6 Set Encrypton Key
// Define the AES 16-byte Encryption Key
char encryptionKey[] = "M6j3b456IIOTKey!";

int countFramesWhlie = 0;

//Loop For Xbee Transmission
int counter = 0;

// define variable
uint8_t error;
float battery = 0;
float battery2 = 0;
float battery_min = 0;
float inc = 0;
float temp = 0;
float temp2 = 0;
float pH;
float pH2;
float orp = 0;
float orp2 = 0;
float turb = 0;
float turb2 = 0;
float od = 0;
float od2 = 0;
float Sp_Cond = 0;
float Sp_Cond2 = 0;
float wipper = 0;
float wipper2 = 0;

// Instantiate ModbusMaster object as slave ID 1
ModbusMaster232 slave(1);


// Float Sensor Data
// Water Temp
char temp2string[15] = "nd";
char temp22string[15] = "nd"; // Sonda #2

//Solar Battery Level #1
char battery2srt[15] = "nd";
char battery22srt[15] = "nd"; // Sonda #2

// Ph Value
char number2[15];
char number22[15]; // Sonda #2

// ORP Vale
char number3[15];
char number33[15]; // Sonda #2

// Trubidity
char number4[15];
char number44[15]; // Sonda #2

// OD Sensor
char number5[15];
char number55[15]; // Sonda #2

//Betery voltage inside the Sensor
char Sp_Cond2str[15] = "nd";
char Sp_Cond22str[15] = "nd"; // Sonda #2

// Wiper amp used
char wipper2str[15] = "nd";
char wipper22str[15] = "nd";


int result;

//================================================================================
//                      Setup Loop
//================================================================================
void setup()
{
  //Power on the USB for viewing data in the serial monitor.
  USB.ON();
  // init XBee
  xbee900HP.ON(SOCKET1);

  // Set Radio Identifier
  xbee900HP.setNodeIdentifier(WASPMOTE_ID);
  xbee900HP.getNodeIdentifier();

  // store Waspmote identifier in EEPROM memory
  frame.setID(WASPMOTE_ID);

  //Area #7 Set Network Retries for Mesh Network
  xbee900HP.setMeshNetworkRetries(0x07);
  xbee900HP.getMeshNetworkRetries();


  //Area #8 Set Radio Power Output

  /*
    Parameter   XBee-PRO
    0            10dBm
    1            12dBm
    2            14dBm
    3            16dBm
    4            18dBm
  */

  xbee900HP.setPowerLevel(4);
  xbee900HP.getPowerLevel();

  //===============================================================================
  //  Set channel

  USB.println(F("-------------------------------"));
  USB.println(F("Configure XBee900 HP"));
  USB.println(F("-------------------------------"));

  USB.println(F("-------------------------------"));

  //Query available frequency channels

  xbee900HP.getAvailableFreq();

  // check at commmand execution flag
  if (xbee900HP.error_AT == 0)
  {
    USB.print(F("1. Available Frequency bitmap is: 0x"));
    USB.printHex(xbee900HP._availableFreq[0]);
    USB.printHex(xbee900HP._availableFreq[1]);
    USB.printHex(xbee900HP._availableFreq[2]);
    USB.printHex(xbee900HP._availableFreq[3]);
    USB.printHex(xbee900HP._availableFreq[4]);
    USB.printHex(xbee900HP._availableFreq[5]);
    USB.printHex(xbee900HP._availableFreq[6]);
    USB.printHex(xbee900HP._availableFreq[7]);
    USB.println();
  }
  else
  {
    USB.println(F("1. Error calling 'getAvailableFreq()'"));
  }

  //Set Channel Mask for frequency bands

  xbee900HP.setChannelMask(channelMask);

  // check at commmand execution flag
  if (xbee900HP.error_AT == 0)
  {
    USB.print(F("2. Channel Mask bitmap is set to: 0x"));
    USB.printHex(xbee900HP._channelMask[0]);
    USB.printHex(xbee900HP._channelMask[1]);
    USB.printHex(xbee900HP._channelMask[2]);
    USB.printHex(xbee900HP._channelMask[3]);
    USB.printHex(xbee900HP._channelMask[4]);
    USB.printHex(xbee900HP._channelMask[5]);
    USB.printHex(xbee900HP._channelMask[6]);
    USB.printHex(xbee900HP._channelMask[7]);
    USB.println();
  }
  else
  {
    USB.println(F("2. Error calling 'setChannelMask()'"));
  }

  //Get Minimum Frequency Count

  xbee900HP.getMinFreqCount();

  // check at commmand execution flag
  if (xbee900HP.error_AT == 0)
  {
    USB.print(F("3. Minimum Frequency Count:"));
    USB.println(xbee900HP._minFreqCount, DEC);
  }
  else
  {
    USB.println(F("3. Error calling 'getMinFreqCount()'"));
  }

  //Set PANID

  xbee900HP.setPAN(panID);

  // check the AT commmand execution flag
  if (xbee900HP.error_AT == 0)
  {
    USB.print(F("4. PAN ID set OK to: 0x"));
    USB.printHex(xbee900HP.PAN_ID[0]);
    USB.printHex(xbee900HP.PAN_ID[1]);
    USB.println();
  }
  else
  {
    USB.println(F("4. Error calling 'setPAN()'"));
  }

  //Set Preamble ID

  xbee900HP.setPreambleID(preambleID);

  // check at commmand execution flag
  if (xbee900HP.error_AT == 0)
  {
    USB.print(F("5. Preamble set to:"));
    USB.println(xbee900HP._preambleID, DEC);
  }
  else
  {
    USB.println(F("5. Error calling 'setPreambleID()'"));
  }

  //Set encryption mode (1:enable; 0:disable)
  xbee900HP.setEncryptionMode(encryptionMode);

  // check the AT commmand execution flag
  if (xbee900HP.error_AT == 0)
  {
    USB.print(F("6. AES encryption configured (1:enabled; 0:disabled):"));
    USB.println(xbee900HP.encryptMode, DEC);
  }
  else
  {
    USB.println(F("6. Error calling 'setEncryptionMode()'"));
  }

  // Set the encryption key

  xbee900HP.setLinkKey(encryptionKey);

  // check the AT commmand execution flag
  if (xbee900HP.error_AT == 0)
  {
    USB.println(F("7. AES encryption key set OK"));
  }
  else
  {
    USB.println(F("7. Error calling 'setLinkKey()'"));
  }

  //8. write values to XBee module memory

  xbee900HP.writeValues();

  // check the AT commmand execution flag
  if (xbee900HP.error_AT == 0)
  {
    USB.println(F("8. Changes stored OK"));
  }
  else
  {
    USB.println(F("8. Error calling 'writeValues()'"));
  }

  USB.println(F("-------------------------------"));


  // Initialize Modbus communication baud rate
  slave.begin(9600, SOCKET0);
  //  result =  slave.readHoldingRegisters(0,28);
}

//================================================================================
//                              Run Loop
//================================================================================

void loop()
{

  xbee900HP.ON(SOCKET1);
  delay(200);

  // Show the remaining battery level
  USB.print(F("Battery Level: "));
  USB.print(PWR.getBatteryLevel(), DEC);
  USB.print(F(" %"));

  // Show the battery Volts
  USB.print(F(" | Battery (Volts): "));
  USB.print(PWR.getBatteryVolts());
  USB.println(F(" V"));

  delay(1000);

  // Initialize Modbus communication baud rate
  slave.begin(9600, SOCKET0);

  //Print hello message
  USB.println("Modbus communication over RS-232 - Turbidity Sensor MG");
  delay(100);
  RTC.ON();

  // slave.readHoldingRegisters(0,28);
  result =  slave.readHoldingRegisters(0, 28);


  //================================================================================
  //                       For float point variable

  // For float point variable

  union
  {
    unsigned int i[2];
    float f;
  } foo;

  result =  slave.readHoldingRegisters(0, 28);
  delay(200);

  if (result != 0) {
    //If no response from the slave, print an error message.
    USB.print("Communication error. Couldn't read from slave: ");
    USB.println(result);
    delay(200);
    battery = 0;
    battery2 = 0;
    battery_min = 0;
    temp = 0;
    temp2 = 0;
    pH = 0;
    pH2 = 0;
    orp = 0;
    orp2 = 0;
    turb = 0;
    turb2 = 0;
    od = 0;
    od2 = 0;
    Sp_Cond = 0;
    Sp_Cond2 = 0;
    wipper = 0;
    wipper2 = 0;

  }
  // else {

  //================================================================================
  //                       Sonda #1 Float Point Variable

  USB.println("\n Sonda #1");
  // Register 0 1
  USB.println("\n Battery");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(0);
  foo.i[1] = slave.getResponseBuffer(1);
  USB.println(foo.f);
  battery = foo.f;
  Utils.float2String(battery, battery2srt, 2);
  //USB.println(battery2srt);

  // Register 2 3
  USB.println("\n Temp");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(2);
  foo.i[1] = slave.getResponseBuffer(3);
  // USB.println(foo.f);
  temp = foo.f;
  USB.println(temp);
  Utils.float2String(temp, temp2string, 2);
  //USB.println(temp2string);

  // Register 4 5
  USB.println("\n Sp Cond");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(4);
  foo.i[1] = slave.getResponseBuffer(5);
  //USB.println(foo.f);
  Sp_Cond = foo.f;
  Utils.float2String(Sp_Cond, Sp_Cond2str, 2);
  USB.println(Sp_Cond2str);

  // Register 6 7
  USB.println("\n pH");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(6);
  foo.i[1] = slave.getResponseBuffer(7);
  USB.println(foo.f);
  pH = foo.f;
  Utils.float2String(pH, number2, 2);
  //USB.println(number2);


  // Register 8 9
  USB.println("\n Turbidity ");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(8);
  foo.i[1] = slave.getResponseBuffer(9);
  USB.println(foo.f);
  turb = foo.f;
  Utils.float2String(turb, number4, 2);
  //USB.println(number4);

  // Register 10 11
  USB.println("\n OD");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(10);
  foo.i[1] = slave.getResponseBuffer(11);
  USB.println(foo.f);
  od = foo.f;
  Utils.float2String(od, number5, 2);
  //USB.println(number5);

  // Register 16 17
  USB.println("\n Wipper mA");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(12);
  foo.i[1] = slave.getResponseBuffer(13);
  //USB.println(foo.f);
  wipper = foo.f;
  Utils.float2String(wipper, wipper2str, 2);
  USB.println(wipper2str);
  USB.println("Passed wiper");

  USB.println("\n====================================== \n");
  USB.print("\n");
  delay(1000);



  //================================================================================
  //                       Sonda #2 Float Point Variable
  /*
    USB.println("\n Sonda #2");
    // Register 0 1
    USB.println("\n Battery");
    USB.print(F("\t"));
    foo.i[0] = slave.getResponseBuffer(14);
    foo.i[1] = slave.getResponseBuffer(15);
    USB.println(foo.f);
    battery2 = foo.f;
    Utils.float2String(battery2,battery22srt,3);
    //USB.println(battery2srt);
  */

  // Register 2 3
  USB.println("\n Temp");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(16);
  foo.i[1] = slave.getResponseBuffer(17);
  // USB.println(foo.f);
  temp2 = foo.f;
  USB.println(temp2);
  Utils.float2String(temp2, temp22string, 2);
  //USB.println(temp2string);

  // Register 4 5
  USB.println("\n Sp Cond");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(18);
  foo.i[1] = slave.getResponseBuffer(19);
  //USB.println(foo.f);
  Sp_Cond2 = foo.f;
  Utils.float2String(Sp_Cond2, Sp_Cond22str, 2);
  USB.println(Sp_Cond22str);

  // Register 20 21
  USB.println("\n pH");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(20);
  foo.i[1] = slave.getResponseBuffer(21);
  USB.println(foo.f);
  pH2 = foo.f;
  Utils.float2String(pH2, number22, 2);
  //USB.println(number2);


  // Register 22 23
  USB.println("\n Turbidity ");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(22);
  foo.i[1] = slave.getResponseBuffer(23);
  USB.println(foo.f);
  turb2 = foo.f;
  Utils.float2String(turb2, number44, 2);
  //USB.println(number4);

  // Register 24 25
  USB.println("\n OD");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(24);
  foo.i[1] = slave.getResponseBuffer(25);
  USB.println(foo.f);
  od2 = foo.f;
  Utils.float2String(od2, number55, 2);
  //USB.println(number5);

  // Register 26 27
  USB.println("\n Wipper mA");
  USB.print(F("\t"));
  foo.i[0] = slave.getResponseBuffer(26);
  foo.i[1] = slave.getResponseBuffer(27);
  USB.println(foo.f);
  wipper2 = foo.f;
  Utils.float2String(wipper2, wipper22str, 2);
  //USB.println(wipper22str);
  USB.println("Passed wiper");
  //}

  USB.println("\n====================================== \n");
  USB.print("\n");
  delay(1000);

  //Clear the response buffer.
  slave.clearResponseBuffer();
  delay(500);


  //=======================================
  // 1. Create ASCII frame (First Frame)
  // Sonda #1

  //  frame.createFrame(MAX_FRAME);
  //or ASCII

  frame.createFrame(ASCII, sonda0);
  // add frame fields
  frame.addSensor(SENSOR_STR, battery2srt);
  frame.addSensor(SENSOR_WATER_WT, temp);
  frame.addSensor(SENSOR_WATER_COND, Sp_Cond2str);
  frame.addSensor(SENSOR_WATER_PH, number2);
  frame.showFrame();

  // Send packet
  error = xbee900HP.send( RX_ADDRESS, frame.buffer, frame.length );
  // check TX flag
  if ( error == 0 )
  {
    USB.println(F("send ok"));
  }
  else //This else starts a loop to resend the last dat recived fromt the sensor
  {
    counter = 1;
    USB.println(F("Start LOOP 1 to 3 "));
    while (counter < 3) // You can change the retries here
    {
      USB.println(F("Send Packet Again"));
      delay(500); // 5 sec Delay for the loop to try again 10000 = 10 seconds

      error = xbee900HP.send(RX_ADDRESS, frame.buffer, frame.length);
      // check TX flag
      if (error == 0)
      {
        USB.println(F("Send Ok"));
        counter = 4; //If the radio recives a TX flag of 0 this will break out of the loop
      }
      else
      {
        USB.println(F("Faled Again"));
        counter++;
        USB.println(counter);
      }
    }
  }

  delay(500);

  //=======================================
  // Create ASCII frame (Second Frame)
  //  frame.createFrame(MAX_FRAME);
  //or ASCII
  frame.createFrame(ASCII, sonda0);
  frame.addSensor(SENSOR_WATER_TURB, number4);
  frame.addSensor(SENSOR_WATER_DO, number5);
  frame.addSensor(SENSOR_AGR_WV, wipper);
  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());
  frame.showFrame();

  // Send packet
  // send XBee packet
  error = xbee900HP.send( RX_ADDRESS, frame.buffer, frame.length );
  // check TX flag
  if ( error == 0 )
  {
    USB.println(F("send ok"));
    // blink green LED
    Utils.blinkGreenLED();
  }
  else //This else starts a loop to resend the last dat recived fromt the sensor
  {
    counter = 1;
    USB.println(F("Start LOOP 1 to 3 "));
    while (counter < 3) // You can change the retries here
    {
      USB.println(F("Send Packet Again"));
      delay(500); // 5 sec Delay for the loop to try again 10000 = 10 seconds

      error = xbee900HP.send(RX_ADDRESS, frame.buffer, frame.length);
      // check TX flag
      if (error == 0)
      {
        USB.println(F("Send Ok"));
        counter = 4; //If the radio recives a TX flag of 0 this will break out of the loop
      }
      else
      {
        USB.println(F("Faled Again"));
        counter++;
        USB.println(counter);
      }
    }
  }
  delay(500);

  //======================================= Sonda #2

  //= == == == == == == == == == == == == == == == == == == ==

  // 1. Create ASCII frame (First Frame)
  // Sonda #2

  //  frame.createFrame(MAX_FRAME);
  //or ASCII

  frame.createFrame(ASCII, sonda1);
  // add frame fields
  frame.addSensor(SENSOR_WATER_WT, temp2);
  frame.addSensor(SENSOR_WATER_COND, Sp_Cond22str);
  frame.addSensor(SENSOR_WATER_PH, number22);
  frame.showFrame();

  // Send packet
  error = xbee900HP.send( RX_ADDRESS, frame.buffer, frame.length );
  // check TX flag
  if ( error == 0 )
  {
    USB.println(F("send ok"));
    // blink green LED
    //Utils.blinkGreenLED();
  }
  else //This else starts a loop to resend the last dat recived fromt the sensor
  {
    counter = 1;
    USB.println(F("Start LOOP 1 to 3 "));
    while (counter < 3) // You can change the retries here
    {
      USB.println(F("Send Packet Again"));
      delay(500); // 5 sec Delay for the loop to try again 10000 = 10 seconds

      error = xbee900HP.send(RX_ADDRESS, frame.buffer, frame.length);
      // check TX flag
      if (error == 0)
      {
        USB.println(F("Send Ok"));
        counter = 4; //If the radio recives a TX flag of 0 this will break out of the loop
      }
      else
      {
        USB.println(F("Faled Again"));
        counter++;
        USB.println(counter);
      }
    }
  }

  delay(500);

  //=======================================
  // Create ASCII frame (Second Frame)
  //  frame.createFrame(MAX_FRAME);
  //or ASCII
  frame.createFrame(ASCII, sonda1);
  frame.addSensor(SENSOR_WATER_TURB, number44);
  frame.addSensor(SENSOR_WATER_DO, number55);
  frame.addSensor(SENSOR_AGR_WV, wipper2);
  frame.showFrame();

  // Send packet

  // send XBee packet
  error = xbee900HP.send( RX_ADDRESS, frame.buffer, frame.length );
  // check TX flag
  if ( error == 0 )
  {
    USB.println(F("send ok"));
    // blink green LED
    Utils.blinkGreenLED();
  }
  else //This else starts a loop to resend the last dat recived fromt the sensor
  {
    counter = 1;
    USB.println(F("Start LOOP 1 to 3 "));
    while (counter < 3) // You can change the retries here
    {
      USB.println(F("Send Packet Again"));
      delay(500); // 5 sec Delay for the loop to try again 10000 = 10 seconds

      error = xbee900HP.send(RX_ADDRESS, frame.buffer, frame.length);
      // check TX flag
      if (error == 0)
      {
        USB.println(F("Send Ok"));
        counter = 4; //If the radio recives a TX flag of 0 this will break out of the loop
      }
      else
      {
        USB.println(F("Faled Again"));
        counter++;
        USB.println(counter);
      }
    }
  }

  USB.println(F("\n++++++++++++++ 50 Sec Time Off-Set ++++++++++++++++"));
  delay(50000);

}


