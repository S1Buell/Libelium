// Code 9.6 Change  the nodeAddress and nodeID.
//Alex & Tom
// Change Log // Things you need to Change
// 1.2 char nodeID[] = "SEPro-Vit-Node26"; // Change to match you node name standard SE = Plug and sense type SEPro (Smart Environment Pro), Location and Node Number
// 1.3 uint8_t meshlium_address = 2; Change the Meshlium address to match your gateway number
// 1.4 char password[] = "libeliumlibelium";  Edit your 16-Byte enctyption key to match your gateway key
// 1.5 uint8_t node_address = 26; set your sensor node number. Must be unique number for each sensor on the network for the AP

// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Area #1 Set Global Variables %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//Enter Librarys needed 
// 1.0 library
  #include <WaspSX1272.h>
  #include <WaspFrame.h>
  #include <WaspSensorCities.h>
 


// 1.1 
//Enter Sensor objects if needed
 


// 1.2 
//CHANGING NODEID FOR A NEW DEVICE
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  char nodeID[] = "SC-Test-Tom";
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// 1.3 
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// Define the Meshlium address to send packets
// The default Meshlium address is '1'
  uint8_t meshlium_address = 1;
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// 1.4 
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//Define private a 16-Byte key to encrypt message  
char password[] = "libeliumlibelium"; 
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//%%%%%%%%% IMPORTANT %%%%%%%%%%%%%%%%%%%%%
// 1.5 
//Select the node address value: from 2 to 255 Each node must have a unique node number
// CHANGING NODE ADDRESS FOR A NEW DEVICE
  uint8_t node_address = 31;
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  

// 1.6
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//General Float and int commands

float temperature; 
float humidity; 
//float analogLDRvoltage;
//float dust; 
//float crackLin; 
//float crackPro; 
//float crackDet;
//float ultrasound; 
float audio;
//float tempDS18B20; 
char node_ID[] = "Node_01";
int e;

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

  void setup()
  {
  }


//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Run Loop %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Area #2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Set Lora Config %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

void loop()
{
// 2.0
//Init USB port
    USB.ON();
    //USB.println(F("nodeID"));
    USB.printf("nodeID: %s\n",nodeID);
    USB.println(F("code v10"));
    USB.println(F("Semtech SX1272 module. TX in LoRa to MESHLIUM"));

//  2.1 Real Time Clock
//Switch ON RTC
    RTC.ON();

// 2.3 
// Switch ON ACC or OFF 
    ACC.OFF();

// 2.4
//Set the Waspmote ID
    frame.setID(nodeID);  

    USB.println(F("----------------------------------------"));
    USB.println(F("Setting configuration:")); 
    USB.println(F("----------------------------------------"));
  
// 2.5
//Init sx1272 module
    sx1272.ON();

// 2.6
// %%%%%%%%%%%%%%%%%%%%%% Edit Channel if need %%%%%%%%%%%%%%%%%%%%%%%%%%%%
//Select frequency channel
  e = sx1272.setChannel(CH_12_900);
    USB.print(F("Setting Channel CH_12_900.\t state ")); 
    USB.println(e);
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

// 2.7
//Select implicit (off) or explicit (on) header mode
  e = sx1272.setHeaderON();
    USB.print(F("Setting Header ON.\t\t state "));  
    USB.println(e); 

// 2.7
//Select mode (mode 1)
  e = sx1272.setMode(1);  
    USB.print(F("Setting Mode '1'.\t\t state "));
    USB.println(e);  

// 2.8
//Select CRC on or off
  e = sx1272.setCRC_ON();
    USB.print(F("Setting CRC ON.\t\t\t state "));
    USB.println(e); 

// 2.9
// Select output power (Max, High or Low)
  e = sx1272.setPower('H');
    USB.print(F("Setting Power to 'H'.\t\t state ")); 
    USB.println(e); 
 
 //%%%%%%%%%%%%%%%%%%%%%%%%%Change Node ID%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 // 2.91
 //Select the maximum number of retries: from '0' to '5'
  e = sx1272.setRetries(5);
  USB.print(F("Setting Retries to '5'.\t\t state "));
 //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
  USB.println(e);
  USB.println();
  
  USB.println(F("----------------------------------------"));
  USB.println(F("Sending:")); 
  USB.println(F("----------------------------------------"));



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 2.92
//Get channel RSSI
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  e = sx1272.getRSSI();

  // 2.93
  //check status
  if( e == 0 ) 
  {
    USB.print(F("Getting RSSI \t\t--> OK. "));
    USB.print(F("RSSI current value is: "));
    USB.println(sx1272._RSSI);

  }
  else 
  {
    USB.println(F("Getting RSSI --> ERROR"));
  } 



//%%%%%%%%%%%%%%%%%% IMPORTANT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 2.94
//Select the node address value: from 2 to 255
// CHANGING NODE ADDRESS FOR A NEW DEVICE 
  
  e = sx1272.setNodeAddress(node_address);
    USB.println();
    delay(1000);
  
 
// 2.95
//get Time from RTC
  RTC.getTime();
  
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Area #3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Enter Sensor Options %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  // Set the Waspmote ID
  frame.setID(node_ID); 
  
   
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 3.0
//Turn on Sensor
//Trun on the device here
//Power on board
  SensorCities.ON();
  
  // Power on the temperature sensor
  SensorCities.setSensorMode(SENS_ON, SENS_CITIES_TEMPERATURE);
  // Power on the humidity sensor
  SensorCities.setSensorMode(SENS_ON, SENS_CITIES_HUMIDITY);
  // Power on the LDR sensor
  //SensorCities.setSensorMode(SENS_ON, SENS_CITIES_LDR);
  // Power on the dust sensor
  //SensorCities.setSensorMode(SENS_ON, SENS_CITIES_DUST);
  // Power on the crack linear sensor
  //SensorCities.setSensorMode(SENS_ON, SENS_CITIES_LD);
  // Power on the crack propagation sensor
  //SensorCities.setSensorMode(SENS_ON, SENS_CITIES_CP);
  // Power on the crack detection sensor
  //SensorCities.setSensorMode(SENS_ON, SENS_CITIES_CD);
  // Power on the ultrasound sensor
 // SensorCities.setSensorMode(SENS_ON, SENS_CITIES_ULTRASOUND_3V3);
  // Power on the audio sensor
  SensorCities.setSensorMode(SENS_ON, SENS_CITIES_AUDIO);
  // Power on the DS18B20 sensor
  //SensorCities.setSensorMode(SENS_ON, SENS_CITIES_TEMP_DS18B20);
  delay(2000);
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 3.2
//Read the Sensor
//Read the sensor here

// Read the temperature sensor
  temperature = SensorCities.readValue(SENS_CITIES_TEMPERATURE);
  // Read the humidity sensor
  humidity = SensorCities.readValue(SENS_CITIES_HUMIDITY);
  //First dummy reading for analog-to-digital converter channel selection
  //SensorCities.readValue(SENS_CITIES_LDR);
  //Sensor LDR reading
  //analogLDRvoltage = SensorCities.readValue(SENS_CITIES_LDR);
  // Read the dust sensor
  //dust = SensorCities.readValue(SENS_CITIES_DUST);
  // Read the crack linear sensor
  //crackLin = SensorCities.readValue(SENS_CITIES_LD);
  // Read the crack propagation sensor
 // crackPro = SensorCities.readValue(SENS_CITIES_CP);
  // Read the crack detection sensor
  //crackDet = SensorCities.readValue(SENS_CITIES_CD);
  // Read the ultrasound sensor 
  //ultrasound = SensorCities.readValue(SENS_CITIES_ULTRASOUND_3V3, SENS_US_WRA1);
  // Read the audio sensor
  audio = SensorCities.readValue(SENS_CITIES_AUDIO);
  // Read the DS18B20 sensor 
  //tempDS18B20 = SensorCities.readValue(SENS_CITIES_TEMP_DS18B20);
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//3.3
// Turn off Sensor
// Power off the temperature sensor
  SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_TEMPERATURE);
  // Power off the humidity sensor
  SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_HUMIDITY);
  // Power off the LDR sensor
  //SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_LDR);
  // Power off the dust sensor
  //SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_DUST);
  // Power off the crack linear sensor
 // SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_LD);
  // Power off the crack propagation sensor
 // SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_CP);
  // Power off the crack detection sensor
  //SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_CD);
  // Power off the ultrasound sensor
 // SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_ULTRASOUND_3V3);
  // Power off the audio sensor
  SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_AUDIO);
  // Power off the DS18B20 sensor
  //SensorCities.setSensorMode(SENS_OFF, SENS_CITIES_TEMP_DS18B20);
    delay(10000);
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

// Part 2: USB printing
  // Print the sound level value through the USB
  USB.print(F("Sound pressure: "));
  USB.print(audio);
  USB.println(F("dBA"));

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 3.4 Show Battery levels
// Show the remaining battery level
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    USB.print(F("Battery Level: "));
    USB.print(PWR.getBatteryLevel(),DEC);
    USB.print(F(" %"));
  
// Show the battery Volts
    USB.print(F(" | Battery (Volts): "));
    USB.print(PWR.getBatteryVolts());
    USB.println(F(" V"));
  



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Area #4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Create Frame %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

USB.println(F("Create a new Frame:"));
  

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 4.1 set user frame size via manual parameters (Binary)
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//frame.setFrameSize(220);
//USB.print(F("\n frame size given by the user (220):"));
//USB.println(frame.getFrameSize(),DEC);  
//delay(500);


//%%%%%%%%%%%%%%%%%%% Binary %%%%%%%%%%%%%%%%%%%%%%%%%%%
// 4.2 create new frame (MAX Frame) Binary
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
frame.createFrame(MAX_FRAME);  
USB.println(frame.getFrameSize(),DEC);  


//%%%%%%%% ASCII Frame %%%%%%%%%%%%%%%%%%%%
// 4.3 Create new create ASCII Frame
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//frame.createFrame(ASCII);
//USB.println(frame.getFrameSize(),DEC); 


// 4.4 Sensor Frames

// Add Time and date Frames if needed
//  frame.addSensor(SENSOR_DATE, RTC.date, RTC.month, RTC.year);
//  frame.addSensor(SENSOR_TIME, RTC.hour, RTC.minute, RTC.second);
//  frame.addSensor(SENSOR_ACC, ACC.getX(), ACC.getY(), ACC.getZ());
//  frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel()); 

// Add sensor frames
 // Add temperature
  frame.addSensor(SENSOR_TCA, temperature);
  // Add humidity
  frame.addSensor(SENSOR_HUMA, humidity);
  // Add LDR value
  //frame.addSensor(SENSOR_LUM, analogLDRvoltage);
  // Add dust value
  //frame.addSensor(SENSOR_DUST, dust);
  // Add crack linear
  //frame.addSensor(SENSOR_LD, crackLin);
  // Add crack propagation
  //frame.addSensor(SENSOR_CPG, crackPro);
  // Add crack detection
  //frame.addSensor(SENSOR_CDG, crackDet);
  // Add ultrasound
  //frame.addSensor(SENSOR_US, ultrasound);
  // Add audio
  //frame.addSensor(SENSOR_MCP, audio);
  // Add DS18B20 temperature
 // frame.addSensor(SENSOR_TCC, tempDS18B20);
  

// Prints frame
    frame.showFrame();

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // 4.5 Create Frame with Encrypted contents
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  USB.println(F("2. Encrypting Frame"));   

  /* Calculate encrypted message with ECB cipher mode and ZEROS padding
   The Encryption options are:
   - AES_128
   - AES_192
   - AES_256
   */
  //frame.encryptFrame( AES_128, password ); 

  // Show the Encrypted frame via USB port
  frame.showFrame();
  USB.println();



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
// 4.6 Send packet
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
  USB.println(F("----------------------------------------"));
  USB.println(F("Sending:")); 
  USB.println(F("----------------------------------------"));
  
// Sending packet before ending a timeout
//   e = sx1272.sendPacketTimeout ( meshlium_address, frame.buffer, frame.length );
e = sx1272.sendPacketTimeoutACKRetries ( meshlium_address, frame.buffer, frame.length );
// if ACK was received check signal strength
  if( e == 0 )
  {   
    USB.println(F("Packet sent OK"));     
  }
  else 
  {
    USB.println(F("Error sending the packet"));  
    USB.print(F("state: "));
    USB.println(e, DEC);
  } 

  USB.println();
  delay(2500);

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Deep sleep Area %%%%%%%%%%%%%%%%%%%%%%%%%
// 4.7 Go to deepsleep 
// After X Time, Waspmote wakes up thanks to the RTC Alarm
PWR.deepSleep("00:00:15:00", RTC_OFFSET, RTC_ALM1_MODE1, ALL_OFF);

// Wake UP
  USB.ON();
  USB.println(F("\n Wake UP! \n"));
 
  delay(2500);
}
