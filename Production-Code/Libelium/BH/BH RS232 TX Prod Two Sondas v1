//Test DEC 6th
//Send every min DEC 6th
// Coded created by Alex and Tom Nov 13 2017
// Alex Calegari Fracaroli C0479831@vale.com
// Tom Massicotte Tom.massicotte@vale.com


//Pre Prod Test Code (Tom)
//Test DEC 6th

//Changes
// Area #1.0 Set Pan ID 
// Area #2.0 Set MAC ID 
// Area #3.0 Set Waspmote ID 
// Area #4.0 Set Channel 
// Area #7.0 Set Network Retries 
// Area #8.0 Set Radio Power Output 
// Area #9.0 Sync Time to Gateway
// Area #10.0 Sync Time to Gateway



//last code we made 
#include <Wasp232.h>
#include <ModbusMaster232.h>
#include <WaspXBeeDM.h>
#include <WaspFrame.h>


//================================================================================
//                      Set Variables
//================================================================================

char sonda0[]="PMAI-03";
char sonda1[]="BF-04AS";


        
        //Area #1 Set Pan ID
                uint8_t  panID[2] = {0x22,0x22}; 
        
        //Area #2 Set MAC ID 
             // Define BROADCAST MAC address
             //  char RX_ADDRESS[] = "000000000000FFFF";
        //or 
            //char RX_ADDRESS[] = "0013A20040A5A041";
                char RX_ADDRESS[] = "0013A200408DE1AF";
        
        //Area #3 Set Waspmote ID
               char WASPMOTE_ID[] = "PMAI-03";
            
        // Area #4 Set Channel
                uint8_t  channel = 0x00;
        
        /* 
            0x00 – Channel 0 -- 902 – 904,16 GHz
            0x01 – Channel 1 --  904,16 – 906,32 GHz
            0x02 – Channel 2 -- 906,32 – 908,48 GHz
            0x03 – Channel 3 -- 908,48 – 910,64 GHz
            0x04 – Channel 4 -- 910,64 – 912,80 GHz
            0x05 – Channel 5 -- 912,80 – 914,96 GHz
            0x06 – Channel 6 -- 914,96 – 917,12 GHz
            0x07 – Channel 7 -- 917,12 – 919,28 GHz
            0x08 – Channel 8 -- 919,28 – 921,44 GHz
            0x09 – Channel 9 -- 921,44 – 923,6 GHz
            0x0A – Channel 10 -- 923,6 – 925,76 GHz
            0x0B – Channel 11 -- 925,76 – 928 GHz
        */
        
            // define variable
              uint8_t error;
              float battery= 0;
              float battery2= 0;
              float battery_min= 0;
              float inc = 0;
              float temp=0;
              float temp2=0;
              float pH;
              float pH2;
              float orp=0;
              float orp2=0;
              float turb=0;
              float turb2=0;
              float od = 0;
              float od2 = 0;
              float Sp_Cond = 0;
              float Sp_Cond2 = 0;
              
              float wipper =0;
              float wipper2 =0;
        
            // Instantiate ModbusMaster object as slave ID 1
               ModbusMaster232 slave(1); 

    
    // Float Sensor Data
          // Water Temp
        char temp2string[20]="nd";
        char temp22string[20]="nd"; // Sonda #2
        
        //Solar Battery Level #1
        char battery2srt[20]="nd";
        char battery22srt[20]="nd"; // Sonda #2
        
        // Ph Value
        char number2[20];
        char number22[20]; // Sonda #2
        
        // ORP Vale
        char number3[20];
        char number33[20]; // Sonda #2
        
        // Trubidity
        char number4[20];
        char number44[20]; // Sonda #2
        
        // OD Sensor
        char number5[20];
        char number55[20]; // Sonda #2
        
        //Betery voltage inside the Sensor
        char Sp_Cond2str[20]="nd";
        char Sp_Cond22str[20]="nd"; // Sonda #2
        
        // Wiper amp used 
        char wipper2str[20]="nd";
        char wipper22str[20]="nd";
    
    
    int result;

//================================================================================
//                      Setup Loop
//================================================================================
void setup()
{
         //Power on the USB for viewing data in the serial monitor. 
          USB.ON();
          // init XBee
          xbeeDM.ON(SOCKET1);
             
          //painID
          xbeeDM.setPAN(panID);
    
        // Set Radio Identifier
         xbeeDM.setNodeIdentifier(WASPMOTE_ID);
         xbeeDM.getNodeIdentifier();
    
        // store Waspmote identifier in EEPROM memory
        //  frame.setID(WASPMOTE_ID);
          
    //Area #7 Set Network Retries for Mesh Network
          xbeeDM.setMeshNetworkRetries(0x07);  
          xbeeDM.getMeshNetworkRetries();  
    
          
    //Area #8 Set Radio Power Output
       
          /*
          Parameter   XBee-PRO
          0            10dBm
          1            12dBm
          2            14dBm
          3            16dBm 
          4            18dBm
          */
        
         xbeeDM.setPowerLevel(4);
         xbeeDM.getPowerLevel();
    
        // Initialize Modbus communication baud rate
          slave.begin(9600, SOCKET0);
        //  result =  slave.readHoldingRegisters(0,28);
}

//================================================================================
//                              Run Loop   
//================================================================================
  
void loop()
{
 
       xbeeDM.ON(SOCKET1);  
       delay(200);

       // Show the remaining battery level
       USB.print(F("Battery Level: "));
       USB.print(PWR.getBatteryLevel(),DEC);
       USB.print(F(" %"));
          
       // Show the battery Volts
       USB.print(F(" | Battery (Volts): "));
       USB.print(PWR.getBatteryVolts());
       USB.println(F(" V"));
          
       delay(1000);
    
       // set RTC time
       error = xbeeDM.setRTCfromMeshlium(RX_ADDRESS);
                
       // check flag
       if( error == 0 )
       {
         USB.print(F("SET RTC ok. "));
       }
       else 
       {
         USB.print(F("SET RTC error. "));
       }  
            
       USB.print(F("RTC Time:"));
       USB.println(RTC.getTime());
            
       delay(5000);
 
     // Initialize Modbus communication baud rate
      slave.begin(9600, SOCKET0);
         
      //Print hello message
      USB.println("Modbus communication over RS-232 - Turbidity Sensor MG");
      delay(100);
      RTC.ON();
        
     // slave.readHoldingRegisters(0,28);
      result =  slave.readHoldingRegisters(0,28);


//================================================================================
//                       For float point variable 

          // For float point variable
         
       union
       {
         unsigned int i[2];
         float f;
        } foo;
              
       result =  slave.readHoldingRegisters(0,28);
       delay(200);
      
       if (result != 0) {
        //If no response from the slave, print an error message. 
        USB.print("Communication error. Couldn't read from slave: ");
        USB.println(result);
        delay(200);
       } 
       else { 
   
    //================================================================================
    //                       Sonda #1 Float Point Variable 

       USB.println("\n Sonda #1");
       // Register 0 1
       USB.println("\n Battery"); 
       USB.print(F("\t")); 
       foo.i[0] = slave.getResponseBuffer(0); 
       foo.i[1] = slave.getResponseBuffer(1); 
       USB.println(foo.f);
       battery = foo.f;
       Utils.float2String(battery,battery2srt,3);
       //USB.println(battery2srt);
            
       // Register 2 3
       USB.println("\n Temp"); 
       USB.print(F("\t")); 
       foo.i[0] = slave.getResponseBuffer(2); 
       foo.i[1] = slave.getResponseBuffer(3); 
       // USB.println(foo.f);
       temp = foo.f;
       USB.println(temp);
       Utils.float2String(temp,temp2string,3);
       //USB.println(temp2string);
        
       // Register 4 5
       USB.println("\n Sp Cond"); 
       USB.print(F("\t")); 
       foo.i[0] = slave.getResponseBuffer(4);
       foo.i[1] = slave.getResponseBuffer(5);
       //USB.println(foo.f);
       Sp_Cond = foo.f;
       Utils.float2String(Sp_Cond,Sp_Cond2str,3);
       USB.println(Sp_Cond2str);
            
       // Register 6 7
       USB.println("\n pH"); 
       USB.print(F("\t")); 
       foo.i[0] = slave.getResponseBuffer(6);
       foo.i[1] = slave.getResponseBuffer(7);
       USB.println(foo.f);
       pH = foo.f;
       Utils.float2String(pH,number2,3);
       //USB.println(number2); 
            
         
       // Register 8 9
       USB.println("\n Turbidity "); 
       USB.print(F("\t")); 
       foo.i[0] = slave.getResponseBuffer(8);
       foo.i[1] = slave.getResponseBuffer(9);
       USB.println(foo.f);
       turb = foo.f;
       Utils.float2String(turb,number4,3);
       //USB.println(number4);
          
       // Register 10 11
       USB.println("\n OD"); 
       USB.print(F("\t")); 
       foo.i[0] = slave.getResponseBuffer(10);
       foo.i[1] = slave.getResponseBuffer(11);
       USB.println(foo.f);
       od = foo.f;
       Utils.float2String(od,number5,3);
       //USB.println(number5);
                     
       // Register 16 17
       USB.println("\n Wipper mA"); 
       USB.print(F("\t")); 
       foo.i[0] = slave.getResponseBuffer(12);
       foo.i[1] = slave.getResponseBuffer(13);
       //USB.println(foo.f);
       wipper = foo.f;
       Utils.float2String(wipper,wipper2str,3);
       USB.println(wipper2str);
       USB.println("Passed wiper");
          
       USB.println("\n====================================== \n"); 
       USB.print("\n");
       delay(1000);

    

        //================================================================================
        //                       Sonda #2 Float Point Variable 
              /*
        USB.println("\n Sonda #2");
        // Register 0 1
        USB.println("\n Battery"); 
        USB.print(F("\t")); 
        foo.i[0] = slave.getResponseBuffer(14); 
        foo.i[1] = slave.getResponseBuffer(15); 
        USB.println(foo.f);
        battery2 = foo.f;
        Utils.float2String(battery2,battery22srt,3);
        //USB.println(battery2srt);
          */
              
        // Register 2 3
        USB.println("\n Temp"); 
        USB.print(F("\t")); 
        foo.i[0] = slave.getResponseBuffer(16); 
        foo.i[1] = slave.getResponseBuffer(17); 
        // USB.println(foo.f);
        temp2 = foo.f;
        USB.println(temp2);
        Utils.float2String(temp2,temp22string,3);
        //USB.println(temp2string);
          
        // Register 4 5
        USB.println("\n Sp Cond"); 
        USB.print(F("\t")); 
        foo.i[0] = slave.getResponseBuffer(18);
        foo.i[1] = slave.getResponseBuffer(19);
        //USB.println(foo.f);
        Sp_Cond2 = foo.f;
        Utils.float2String(Sp_Cond2,Sp_Cond22str,3);
        USB.println(Sp_Cond22str);
             
        // Register 20 21
        USB.println("\n pH"); 
        USB.print(F("\t")); 
        foo.i[0] = slave.getResponseBuffer(20);
        foo.i[1] = slave.getResponseBuffer(21);
        USB.println(foo.f);
        pH2 = foo.f;
        Utils.float2String(pH2,number22,3);
        //USB.println(number2); 
             
           
        // Register 22 23
        USB.println("\n Turbidity "); 
        USB.print(F("\t")); 
        foo.i[0] = slave.getResponseBuffer(22);
        foo.i[1] = slave.getResponseBuffer(23);
        USB.println(foo.f);
        turb2 = foo.f;
        Utils.float2String(turb2,number44,3);
        //USB.println(number4);
              
        // Register 24 25
        USB.println("\n OD"); 
        USB.print(F("\t")); 
        foo.i[0] = slave.getResponseBuffer(24);
        foo.i[1] = slave.getResponseBuffer(25);
        USB.println(foo.f);
        od2 = foo.f;
        Utils.float2String(od2,number55,3);
        //USB.println(number5);
             
        // Register 26 27
        USB.println("\n Wipper mA"); 
        USB.print(F("\t")); 
        foo.i[0] = slave.getResponseBuffer(26);
        foo.i[1] = slave.getResponseBuffer(27);
        USB.println(foo.f);
        wipper2 = foo.f;
        Utils.float2String(wipper2,wipper22str,3);
        //USB.println(wipper22str);
        USB.println("Passed wiper");
       }
       
       USB.println("\n====================================== \n"); 
       USB.print("\n");
       delay(1000);
         
       //Clear the response buffer. 
       slave.clearResponseBuffer();
       delay(500);
         

       //=======================================
       // 1. Create ASCII frame (First Frame)
       // Sonda #1
          
       //  frame.createFrame(MAX_FRAME);
       //or ASCII
             
      frame.createFrame(ASCII, sonda0);
      // add frame fields
      frame.addSensor(SENSOR_STR, battery2srt);
      frame.addSensor(SENSOR_TCA, temp);
      frame.addSensor(SENSOR_COND, Sp_Cond2str);    
      frame.addSensor(SENSOR_PH, number2);
      frame.showFrame();
         
      // Send packet
      error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );
      // check TX flag
      if ( error == 0 )
      {
         USB.println(F("send ok"));
      }
      else
      {
         USB.println(F("send error"));
         // blink red LED
         //Utils.blinkRedLED();
      }
       
      delay(2000);
          
     //=======================================
     // Create ASCII frame (Second Frame)
     //  frame.createFrame(MAX_FRAME);
     //or ASCII
     frame.createFrame(ASCII, sonda0);
     frame.addSensor(SENSOR_TURB, number4);
     frame.addSensor(SENSOR_DO, number5);
     frame.addSensor(SENSOR_WV, wipper);
     frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());
     frame.showFrame();
          
     // Send packet
     // send XBee packet
     error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );
     // check TX flag
     if ( error == 0 )
     {
         USB.println(F("send ok"));
         // blink green LED
         Utils.blinkGreenLED();
     }
     else
     {
         USB.println(F("send error"));
         // blink red LED
         Utils.blinkRedLED();
     }
     delay(2000);
          
     //======================================= Sonda #2
            
     //= == == == == == == == == == == == == == == == == == == ==
          
     // 1. Create ASCII frame (First Frame)
     // Sonda #2
                  
     //  frame.createFrame(MAX_FRAME);
     //or ASCII
           
     frame.createFrame(ASCII, sonda1);
     // add frame fields
     frame.addSensor(SENSOR_TCA, temp2);
     frame.addSensor(SENSOR_COND, Sp_Cond22str);    
     frame.addSensor(SENSOR_PH, number22);
     frame.showFrame();
          
     // Send packet
     error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );
     // check TX flag
     if ( error == 0 )
     {
         USB.println(F("send ok"));
         // blink green LED
         //Utils.blinkGreenLED();
     }
     else
     {
         USB.println(F("send error"));
         // blink red LED
         //Utils.blinkRedLED();
     }
          
      delay(2000);
          
     //=======================================
     // Create ASCII frame (Second Frame)
     //  frame.createFrame(MAX_FRAME);
     //or ASCII
     frame.createFrame(ASCII, sonda1);
     frame.addSensor(SENSOR_TURB, number44);
     frame.addSensor(SENSOR_DO, number55);
     frame.addSensor(SENSOR_WV, wipper2);
     frame.showFrame();
          
     // Send packet
         
     // send XBee packet
     error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );
     // check TX flag
     if ( error == 0 )
     {
         USB.println(F("send ok"));
         // blink green LED
         Utils.blinkGreenLED();
     }
     else
     {
         USB.println(F("send error"));
         // blink red LED
         Utils.blinkRedLED();
      }
     delay(2000);
          
       
      USB.println(F("\n++++++++++++++ 40 Sec Time Off-Set ++++++++++++++++"));
      RTC.setAlarm1("00:00:00:40", RTC_OFFSET, RTC_ALM1_MODE4);
      //RTC.setAlarm1("00:00:00:59",RTC_ABSOLUTE,RTC_ALM1_MODE5);
  
}

   
