#include <WaspXBeeDM.h>
#include <WaspFrame.h>



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%   Set Variables %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//Loop
int counter = 0;

//////////////////////////////////////////
// Datalogger 
//////////////////////////////////////////

// define folder and file to store data
char path[]="/data2";
char filename[]="/data2/log2";

// buffer to write into Sd File
char toWrite[200];

// define variables to read stored frames 
uint8_t frameSD[MAX_FRAME+1];
uint16_t lengthSD;
int32_t numLines;

// variables to define the file lines to be read
int startLine;
int endLine;

// define variable
uint8_t sd_answer;
////////////////////////////////////////// END

//Sleep Setting
#define ALL_OFF_ALEX SENS_OFF | RTC_OFF | SOCKET0_ON 
  
// PAN (Personal Area Network) Identifier
uint8_t  panID[2] = {0x12,0x34}; 

// Destination MAC address
//////////////////////////////////////////
char RX_ADDRESS[] = "0013A200408DE1A8";
//////////////////////////////////////////

//OR

// Define BROADCAST MAC address
//////////////////////////////////////////
//char RX_ADDRESS[] = "000000000000FFFF";
//////////////////////////////////////////


// Define the Waspmote ID
char WASPMOTE_ID[] = "Vit_Lagoon_Sensor";


// Define Freq Channel to be set: 
// Digimesh 2.4Ghz. Range from 0x0B to 0x1A
// Digimesh 900Mhz. Range from 0x00 to 0x0B
uint8_t  channel = 0x01;

/* 
0x00 – Channel 0 -- 902 – 904,16 GHz
0x01 – Channel 1 --  904,16 – 906,32 GHz
0x02 – Channel 2 -- 906,32 – 908,48 GHz
0x03 – Channel 3 -- 908,48 – 910,64 GHz
0x04 – Channel 4 -- 910,64 – 912,80 GHz
0x05 – Channel 5 -- 912,80 – 914,96 GHz
0x06 – Channel 6 -- 914,96 – 917,12 GHz
0x07 – Channel 7 -- 917,12 – 919,28 GHz
0x08 – Channel 8 -- 919,28 – 921,44 GHz
0x09 – Channel 9 -- 921,44 – 923,6 GHz
0x0A – Channel 10 -- 923,6 – 925,76 GHz
0x0B – Channel 11 -- 925,76 – 928 GHz
*/

// Define the Encryption mode: 1 (enabled) or 0 (disabled)
uint8_t encryptionMode = 1;

// Define the AES 16-byte Encryption Key
char  encryptionKey[] = "ValeiiotLinkKey!";
 
 // define variable
uint8_t error;

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%   Setup Loop %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
void setup()
{
  // open USB port
  USB.ON();

  USB.println(F("-------------------------------"));
  USB.println(F("Configure XBee Digimesh"));
  USB.println(F("-------------------------------"));
  
  
  // init XBee 
  xbeeDM.ON();    
  
  // store Waspmote identifier in EEPROM memory
  frame.setID( WASPMOTE_ID );
  
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%   Radio Settings  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


/////////////////////////////////////
// Set Radio Power Level 
/////////////////////////////////////

//Mesh Network Retries 
  xbeeDM.setMeshNetworkRetries(0x07);  
  xbeeDM.getMeshNetworkRetries();  
  
  
/////////////////////////////////////
// Set Radio Power Level 
/////////////////////////////////////

/*
Parameter   XBee-PRO
0            10dBm
1            12dBm
2            14dBm
3            16dBm 
4            18dBm
*/

//xbeeDM.setPowerLevel(4);
//xbeeDM.getPowerLevel();

  /////////////////////////////////////
  // 1. set channel 
  /////////////////////////////////////
  
  xbeeDM.setChannel( channel );

  // check at commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("1. Channel set OK to: 0x"));
    USB.printHex( xbeeDM.channel );
    USB.println();
  }
  else 
  {
    USB.println(F("1. Error calling 'setChannel()'"));
  }

  /////////////////////////////////////
  // 2. set PANID
  /////////////////////////////////////
  
   xbeeDM.setPAN(panID);

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("2. PAN ID set OK to: 0x"));
    USB.printHex( xbeeDM.PAN_ID[0] ); 
    USB.printHex( xbeeDM.PAN_ID[1] ); 
    USB.println();
  }
  else 
  {
    USB.println(F("2. Error calling 'setPAN()'"));  
  }

  /////////////////////////////////////
  // 3. set encryption mode (1:enable; 0:disable)
  /////////////////////////////////////
  xbeeDM.setEncryptionMode( encryptionMode );

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.print(F("3. AES encryption configured (1:enabled; 0:disabled):"));
    USB.println( xbeeDM.encryptMode, DEC );
  }
  else 
  {
    USB.println(F("3. Error calling 'setEncryptionMode()'"));
  }

  /////////////////////////////////////
  // 4. set encryption key
  /////////////////////////////////////
  xbeeDM.setLinkKey( encryptionKey );

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("4. AES encryption key set OK"));
  }
  else 
  {
    USB.println(F("4. Error calling 'setLinkKey()'")); 
  }

  /////////////////////////////////////
  // 5. write values to XBee module memory
  /////////////////////////////////////
  xbeeDM.writeValues();

  // check the AT commmand execution flag
  if( xbeeDM.error_AT == 0 ) 
  {
    USB.println(F("5. Changes stored OK"));
  }
  else 
  {
    USB.println(F("5. Error calling 'writeValues()'"));   
  }

  USB.println(F("-------------------------------")); 
  
//////////////////////////////////////////
// Datalogger 
//////////////////////////////////////////

  // Set SD ON
  SD.ON();

  // create path
  sd_answer = SD.mkdir(path);
  
  if( sd_answer == 1 )
  { 
    USB.println(F("path created"));
  }
  else
  {
    USB.println(F("mkdir failed"));
  }
  
  // Create file for Waspmote Frames
  sd_answer = SD.create(filename);
  
  if( sd_answer == 1 )
  { 
    USB.println(F("/data/log created"));
  }
  else
  {
    USB.println(F("/data/log not created"));
  }

/////////////////////////////////////////////
// End Data Logger Loop
////////////////////////////////////////////
   
}

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%   Run Loop %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

void loop()
{
  /////////////////////////////////////////
  // Low power mode
  /////////////////////////////////////////
//  USB.println(F("Going to Sleep"));  
// PWR.deepSleep("00:00:00:10", RTC_OFFSET, RTC_ALM1_MODE1, ALL_OFF_ALEX);
//  USB.println(F("Awake")); 

  /////////////////////////////////////
  // 1. get channel 
  /////////////////////////////////////
  xbeeDM.getChannel();
  USB.print(F("channel: "));
  USB.printHex(xbeeDM.channel);
  USB.println();

  /////////////////////////////////////
  // 2. get PAN ID
  /////////////////////////////////////
  xbeeDM.getPAN();
  USB.print(F("panid: "));
  USB.printHex(xbeeDM.PAN_ID[0]); 
  USB.printHex(xbeeDM.PAN_ID[1]); 
  USB.println(); 
  
  /////////////////////////////////////
  // 3. get Encryption mode (1:enable; 0:disable)
  /////////////////////////////////////
  xbeeDM.getEncryptionMode();
  USB.print(F("encryption mode: "));
  USB.printHex(xbeeDM.encryptMode);
  USB.println(); 
  
  USB.println(F("------------------------------")); 
  
       // switch on the XBee module
  xbeeDM.ON(); 
  
  delay(3000);


//////////////////////////////////////////////////
// Loop Start Sample ten Times
//////////////////////////////////////////////////
    counter=1;
    USB.print(F("Start LOOP 1 to 10 "));
    while(counter < 4){

////////////////////////////////////
  // 1. put XBee to sleep
  ////////////////////////////////////

   xbeeDM.sleep();  

   
//////////////////////////////////////////
// Datalogger 
//////////////////////////////////////////

// Create new frame (ASCII)
//  frame.createFrame(ASCII,"Waspmote_Pro"); 
frame.createFrame(ASCII); 


 // add frame field (String message)
  frame.addSensor(SENSOR_STR, (char*) "data frame");
  // add frame field (Battery level)
  frame.addSensor(SENSOR_BAT, (uint8_t) PWR.getBatteryLevel());
  // add frame field (Accelerometer axis)
  //frame.addSensor(SENSOR_ACC, ACC.getX(), ACC.getY(), ACC.getZ() );
  //show actual Frame 
  frame.showFrame(); 

  memset(toWrite, 0x00, sizeof(toWrite) ); 

  // Conversion from Binary to ASCII
  Utils.hex2str( frame.buffer, toWrite, frame.length);

  USB.print(F("Frame to be stored:"));
  USB.println(toWrite);


  /////////////////////////////////////////////////////   
  // 2. Append data into file
  /////////////////////////////////////////////////////  
  sd_answer = SD.appendln(filename, toWrite);
  
  if( sd_answer == 1 )
  {
    USB.println(F("Frame appended to file"));
  }
  else 
  {
    USB.println(F("Append failed"));
  }

       delay(30000);
       counter ++;
     //  USB.printf("\n Counter = %d \n", counter);
  USB.print(counter);

       USB.print(F("  Loop "));
////////////////////////////////////////// END 
    }

    USB.print(F(" -----------  Data Log Loop Complete ----------- ")); 
  /////////////////////////////////////////////////////
  // 3. Get information from File
  /////////////////////////////////////////////////////  

  // get number of lines in file
  numLines = SD.numln(filename);
  
  // get specified lines from file
  // get only the last file line
  startLine = numLines-4; 
  endLine = numLines;
  
  // iterate to get the File lines specified
  for( int i=startLine; i<endLine ; i++ )
  {  
    // Get 'i' line -> SD.buffer
    SD.catln( filename, i, 1); 
    
    // initialize frameSD
    memset(frameSD, 0x00, sizeof(frameSD) ); 
    
    // conversion from ASCII to Binary 
    lengthSD = Utils.str2hex(SD.buffer, frameSD );

    // Conversion from ASCII to Binary 
    USB.print(F("Get previously stored frame:"));
    for(int j=0; j<lengthSD; j++)
    {    
      USB.print(frameSD[j],BYTE);
    }

  ////////////////////////////////////
  // 2. Wake up the XBee module
  ////////////////////////////////////
  
  // 2.1. wake XBee up
     xbeeDM.wake();  

     // send XBee packet
    USB.println();
    error = xbeeDM.send( RX_ADDRESS, frameSD, lengthSD ); 
    
     // check TX flag
  if( error == 0 )
  {
    USB.println(F("send ok"));
       
  }
  else 
  {
   USB.println(F("send error")); 
  }
    
    /************************************************
    * At this point 'frameSD' and 'lengthSD' can be 
    * used as 'frame.buffer' and 'frame.length' to 
    * send information via some communication module 
    *************************************************/
    ////////////////////////////////////////////////END
    
  }

 // send XBee packet
 // error = xbeeDM.send( RX_ADDRESS, frame.buffer, frame.length );   
 //   error = xbeeDM.send( RX_ADDRESS, frameSD, lengthSD );   
   


counter=0;

}






